
SNAKE_GAME_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a74  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d70  08001c0c  08001c0c  00011c0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800297c  0800297c  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  0800297c  0800297c  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800297c  0800297c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800297c  0800297c  0001297c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002980  08002980  00012980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08002984  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000714  20000098  08002a1c  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007ac  08002a1c  000207ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038dd  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000b77  00000000  00000000  000239a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000328  00000000  00000000  00024520  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000298  00000000  00000000  00024848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002ca8  00000000  00000000  00024ae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002d94  00000000  00000000  00027788  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ac75  00000000  00000000  0002a51c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00035191  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c90  00000000  00000000  0003520c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08001bf4 	.word	0x08001bf4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	08001bf4 	.word	0x08001bf4

080001d8 <I2C1_GPIOInits>:
void wait_check(void);
void check_food(void);
void game_over_screen(void);

void I2C1_GPIOInits(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001de:	4b0e      	ldr	r3, [pc, #56]	; (8000218 <I2C1_GPIOInits+0x40>)
 80001e0:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80001e6:	2301      	movs	r3, #1
 80001e8:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80001ea:	2301      	movs	r3, #1
 80001ec:	72fb      	strb	r3, [r7, #11]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 80001ee:	2304      	movs	r3, #4
 80001f0:	737b      	strb	r3, [r7, #13]
	I2CPins. GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]

	//scl
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_8;
 80001f6:	2308      	movs	r3, #8
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 ffed 	bl	80011dc <GPIO_Init>

	//sda
	//Note : since we found a glitch on PB9 , you can also try with PB7
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 8000202:	2309      	movs	r3, #9
 8000204:	723b      	strb	r3, [r7, #8]

	GPIO_Init(&I2CPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 ffe7 	bl	80011dc <GPIO_Init>

}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	40020400 	.word	0x40020400

0800021c <I2C1_Inits>:

void I2C1_Inits(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000220:	4b09      	ldr	r3, [pc, #36]	; (8000248 <I2C1_Inits+0x2c>)
 8000222:	4a0a      	ldr	r2, [pc, #40]	; (800024c <I2C1_Inits+0x30>)
 8000224:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8000226:	4b08      	ldr	r3, [pc, #32]	; (8000248 <I2C1_Inits+0x2c>)
 8000228:	2201      	movs	r2, #1
 800022a:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_ADDR;
 800022c:	4b06      	ldr	r3, [pc, #24]	; (8000248 <I2C1_Inits+0x2c>)
 800022e:	2261      	movs	r2, #97	; 0x61
 8000230:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000232:	4b05      	ldr	r3, [pc, #20]	; (8000248 <I2C1_Inits+0x2c>)
 8000234:	2200      	movs	r2, #0
 8000236:	729a      	strb	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000238:	4b03      	ldr	r3, [pc, #12]	; (8000248 <I2C1_Inits+0x2c>)
 800023a:	4a05      	ldr	r2, [pc, #20]	; (8000250 <I2C1_Inits+0x34>)
 800023c:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 800023e:	4802      	ldr	r0, [pc, #8]	; (8000248 <I2C1_Inits+0x2c>)
 8000240:	f001 fa1e 	bl	8001680 <I2C_Init>
}
 8000244:	bf00      	nop
 8000246:	bd80      	pop	{r7, pc}
 8000248:	200004cc 	.word	0x200004cc
 800024c:	40005400 	.word	0x40005400
 8000250:	000186a0 	.word	0x000186a0

08000254 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b08c      	sub	sp, #48	; 0x30
 8000258:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtnR;
	GPIOBtnR.pGPIOx = GPIOD;
 800025a:	4b21      	ldr	r3, [pc, #132]	; (80002e0 <GPIO_ButtonInit+0x8c>)
 800025c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIOBtnR.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800025e:	2300      	movs	r3, #0
 8000260:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	GPIOBtnR.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000264:	2300      	movs	r3, #0
 8000266:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	GPIOBtnR.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800026a:	2302      	movs	r3, #2
 800026c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	GPIOBtnR.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000270:	2301      	movs	r3, #1
 8000272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	GPIO_Init(&GPIOBtnR);
 8000276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800027a:	4618      	mov	r0, r3
 800027c:	f000 ffae 	bl	80011dc <GPIO_Init>

	GPIO_Handle_t GPIOBtnL;
	GPIOBtnL.pGPIOx = GPIOD;
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <GPIO_ButtonInit+0x8c>)
 8000282:	61bb      	str	r3, [r7, #24]
	GPIOBtnL.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000284:	2302      	movs	r3, #2
 8000286:	773b      	strb	r3, [r7, #28]
	GPIOBtnL.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000288:	2300      	movs	r3, #0
 800028a:	777b      	strb	r3, [r7, #29]
	GPIOBtnL.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800028c:	2302      	movs	r3, #2
 800028e:	77bb      	strb	r3, [r7, #30]
	GPIOBtnL.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000290:	2301      	movs	r3, #1
 8000292:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(&GPIOBtnL);
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f000 ff9f 	bl	80011dc <GPIO_Init>

	GPIO_Handle_t GPIOBtnU;
	GPIOBtnU.pGPIOx = GPIOD;
 800029e:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <GPIO_ButtonInit+0x8c>)
 80002a0:	60fb      	str	r3, [r7, #12]
	GPIOBtnU.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80002a2:	2303      	movs	r3, #3
 80002a4:	743b      	strb	r3, [r7, #16]
	GPIOBtnU.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002a6:	2300      	movs	r3, #0
 80002a8:	747b      	strb	r3, [r7, #17]
	GPIOBtnU.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002aa:	2302      	movs	r3, #2
 80002ac:	74bb      	strb	r3, [r7, #18]
	GPIOBtnU.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002ae:	2301      	movs	r3, #1
 80002b0:	74fb      	strb	r3, [r7, #19]
	GPIO_Init(&GPIOBtnU);
 80002b2:	f107 030c 	add.w	r3, r7, #12
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 ff90 	bl	80011dc <GPIO_Init>

	GPIO_Handle_t GPIOBtnD;
	GPIOBtnD.pGPIOx = GPIOD;
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <GPIO_ButtonInit+0x8c>)
 80002be:	603b      	str	r3, [r7, #0]
	GPIOBtnD.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_1;
 80002c0:	2301      	movs	r3, #1
 80002c2:	713b      	strb	r3, [r7, #4]
	GPIOBtnD.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002c4:	2300      	movs	r3, #0
 80002c6:	717b      	strb	r3, [r7, #5]
	GPIOBtnD.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002c8:	2302      	movs	r3, #2
 80002ca:	71bb      	strb	r3, [r7, #6]
	GPIOBtnD.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80002cc:	2301      	movs	r3, #1
 80002ce:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(&GPIOBtnD);
 80002d0:	463b      	mov	r3, r7
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 ff82 	bl	80011dc <GPIO_Init>
}
 80002d8:	bf00      	nop
 80002da:	3730      	adds	r7, #48	; 0x30
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40020c00 	.word	0x40020c00

080002e4 <main>:

int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
	GPIO_ButtonInit();
 80002e8:	f7ff ffb4 	bl	8000254 <GPIO_ButtonInit>
	//i2c pin inits
	I2C1_GPIOInits();
 80002ec:	f7ff ff74 	bl	80001d8 <I2C1_GPIOInits>
	//i2c peripheral configuration
	I2C1_Inits();
 80002f0:	f7ff ff94 	bl	800021c <I2C1_Inits>
	//enable the i2c peripheral
	I2C_PeripheralControl(I2C1,ENABLE);
 80002f4:	2101      	movs	r1, #1
 80002f6:	4821      	ldr	r0, [pc, #132]	; (800037c <main+0x98>)
 80002f8:	f001 f96e 	bl	80015d8 <I2C_PeripheralControl>
	systick_init();
 80002fc:	f001 fb5a 	bl	80019b4 <systick_init>
	DelayMs(100);
 8000300:	2064      	movs	r0, #100	; 0x64
 8000302:	f001 fb93 	bl	8001a2c <DelayMs>
	ssd1306_Init();
 8000306:	f000 fc97 	bl	8000c38 <ssd1306_Init>

	init_grid();
 800030a:	f000 f91f 	bl	800054c <init_grid>
	draw_grid[0][0]=2;
 800030e:	4b1c      	ldr	r3, [pc, #112]	; (8000380 <main+0x9c>)
 8000310:	2202      	movs	r2, #2
 8000312:	601a      	str	r2, [r3, #0]
	draw_grid[1][0]=2;
 8000314:	4b1a      	ldr	r3, [pc, #104]	; (8000380 <main+0x9c>)
 8000316:	2202      	movs	r2, #2
 8000318:	621a      	str	r2, [r3, #32]
	snake_pos[0][0]=0;
 800031a:	4b1a      	ldr	r3, [pc, #104]	; (8000384 <main+0xa0>)
 800031c:	2200      	movs	r2, #0
 800031e:	601a      	str	r2, [r3, #0]
	snake_pos[1][0]=0;
 8000320:	4b18      	ldr	r3, [pc, #96]	; (8000384 <main+0xa0>)
 8000322:	2200      	movs	r2, #0
 8000324:	651a      	str	r2, [r3, #80]	; 0x50
	snake_pos[0][1]=1;
 8000326:	4b17      	ldr	r3, [pc, #92]	; (8000384 <main+0xa0>)
 8000328:	2201      	movs	r2, #1
 800032a:	605a      	str	r2, [r3, #4]
	snake_pos[1][1]=0;
 800032c:	4b15      	ldr	r3, [pc, #84]	; (8000384 <main+0xa0>)
 800032e:	2200      	movs	r2, #0
 8000330:	655a      	str	r2, [r3, #84]	; 0x54
	size_of_snake=2;
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <main+0xa4>)
 8000334:	2202      	movs	r2, #2
 8000336:	601a      	str	r2, [r3, #0]
	snake_speed[0]=1;
 8000338:	4b14      	ldr	r3, [pc, #80]	; (800038c <main+0xa8>)
 800033a:	2201      	movs	r2, #1
 800033c:	601a      	str	r2, [r3, #0]
	snake_speed[1]=0;
 800033e:	4b13      	ldr	r3, [pc, #76]	; (800038c <main+0xa8>)
 8000340:	2200      	movs	r2, #0
 8000342:	605a      	str	r2, [r3, #4]
	sw_up=true;
 8000344:	4b12      	ldr	r3, [pc, #72]	; (8000390 <main+0xac>)
 8000346:	2201      	movs	r2, #1
 8000348:	701a      	strb	r2, [r3, #0]
	sw_down=true;
 800034a:	4b12      	ldr	r3, [pc, #72]	; (8000394 <main+0xb0>)
 800034c:	2201      	movs	r2, #1
 800034e:	701a      	strb	r2, [r3, #0]
	sw_right=true;
 8000350:	4b11      	ldr	r3, [pc, #68]	; (8000398 <main+0xb4>)
 8000352:	2201      	movs	r2, #1
 8000354:	701a      	strb	r2, [r3, #0]
	sw_left=true;
 8000356:	4b11      	ldr	r3, [pc, #68]	; (800039c <main+0xb8>)
 8000358:	2201      	movs	r2, #1
 800035a:	701a      	strb	r2, [r3, #0]
	score=0;
 800035c:	4b10      	ldr	r3, [pc, #64]	; (80003a0 <main+0xbc>)
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
	spawn_food();
 8000362:	f000 fa13 	bl	800078c <spawn_food>

	while(1)
	{
		update_grid();
 8000366:	f000 f8b1 	bl	80004cc <update_grid>
		check_food();
 800036a:	f000 fb21 	bl	80009b0 <check_food>
		move_snake();
 800036e:	f000 f913 	bl	8000598 <move_snake>
		check_collision();
 8000372:	f000 fa4b 	bl	800080c <check_collision>
		wait_check();
 8000376:	f000 fa81 	bl	800087c <wait_check>
		update_grid();
 800037a:	e7f4      	b.n	8000366 <main+0x82>
 800037c:	40005400 	.word	0x40005400
 8000380:	20000598 	.word	0x20000598
 8000384:	200004f4 	.word	0x200004f4
 8000388:	20000008 	.word	0x20000008
 800038c:	20000000 	.word	0x20000000
 8000390:	200000b4 	.word	0x200000b4
 8000394:	200000b5 	.word	0x200000b5
 8000398:	200000b6 	.word	0x200000b6
 800039c:	200000b7 	.word	0x200000b7
 80003a0:	20000594 	.word	0x20000594

080003a4 <draw_snake>:
	}
}

void draw_snake(int x,int y){
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b088      	sub	sp, #32
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	6039      	str	r1, [r7, #0]
	int x0=x*8;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	00db      	lsls	r3, r3, #3
 80003b2:	617b      	str	r3, [r7, #20]
	int y0=y*8;
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	00db      	lsls	r3, r3, #3
 80003b8:	613b      	str	r3, [r7, #16]
	int x1=x0+8;
 80003ba:	697b      	ldr	r3, [r7, #20]
 80003bc:	3308      	adds	r3, #8
 80003be:	60fb      	str	r3, [r7, #12]
	int y1=y0+8;
 80003c0:	693b      	ldr	r3, [r7, #16]
 80003c2:	3308      	adds	r3, #8
 80003c4:	60bb      	str	r3, [r7, #8]
	for(int i=x0;i<x1;i++){
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	61fb      	str	r3, [r7, #28]
 80003ca:	e014      	b.n	80003f6 <draw_snake+0x52>
		for(int j=y0;j<y1;j++){
 80003cc:	693b      	ldr	r3, [r7, #16]
 80003ce:	61bb      	str	r3, [r7, #24]
 80003d0:	e00a      	b.n	80003e8 <draw_snake+0x44>
			ssd1306_DrawPixel(i,j,0x01);
 80003d2:	69fb      	ldr	r3, [r7, #28]
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	69ba      	ldr	r2, [r7, #24]
 80003d8:	b2d1      	uxtb	r1, r2
 80003da:	2201      	movs	r2, #1
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 fd1d 	bl	8000e1c <ssd1306_DrawPixel>
		for(int j=y0;j<y1;j++){
 80003e2:	69bb      	ldr	r3, [r7, #24]
 80003e4:	3301      	adds	r3, #1
 80003e6:	61bb      	str	r3, [r7, #24]
 80003e8:	69ba      	ldr	r2, [r7, #24]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	dbf0      	blt.n	80003d2 <draw_snake+0x2e>
	for(int i=x0;i<x1;i++){
 80003f0:	69fb      	ldr	r3, [r7, #28]
 80003f2:	3301      	adds	r3, #1
 80003f4:	61fb      	str	r3, [r7, #28]
 80003f6:	69fa      	ldr	r2, [r7, #28]
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	dbe6      	blt.n	80003cc <draw_snake+0x28>
		}
	}
}
 80003fe:	bf00      	nop
 8000400:	3720      	adds	r7, #32
 8000402:	46bd      	mov	sp, r7
 8000404:	bd80      	pop	{r7, pc}

08000406 <draw_food>:
void draw_food(int x,int y){
 8000406:	b580      	push	{r7, lr}
 8000408:	b088      	sub	sp, #32
 800040a:	af00      	add	r7, sp, #0
 800040c:	6078      	str	r0, [r7, #4]
 800040e:	6039      	str	r1, [r7, #0]
	int x0=x*8;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	00db      	lsls	r3, r3, #3
 8000414:	617b      	str	r3, [r7, #20]
	int y0=y*8;
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	00db      	lsls	r3, r3, #3
 800041a:	613b      	str	r3, [r7, #16]
	int x1=x0+8;
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	3308      	adds	r3, #8
 8000420:	60fb      	str	r3, [r7, #12]
	int y1=y0+8;
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	3308      	adds	r3, #8
 8000426:	60bb      	str	r3, [r7, #8]
	for(int i=x0;i<x1;i++){
 8000428:	697b      	ldr	r3, [r7, #20]
 800042a:	61fb      	str	r3, [r7, #28]
 800042c:	e014      	b.n	8000458 <draw_food+0x52>
		for(int j=y0;j<y1;j++){
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	61bb      	str	r3, [r7, #24]
 8000432:	e00a      	b.n	800044a <draw_food+0x44>
			ssd1306_DrawPixel(i,j,0x01);
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	69ba      	ldr	r2, [r7, #24]
 800043a:	b2d1      	uxtb	r1, r2
 800043c:	2201      	movs	r2, #1
 800043e:	4618      	mov	r0, r3
 8000440:	f000 fcec 	bl	8000e1c <ssd1306_DrawPixel>
		for(int j=y0;j<y1;j++){
 8000444:	69bb      	ldr	r3, [r7, #24]
 8000446:	3301      	adds	r3, #1
 8000448:	61bb      	str	r3, [r7, #24]
 800044a:	69ba      	ldr	r2, [r7, #24]
 800044c:	68bb      	ldr	r3, [r7, #8]
 800044e:	429a      	cmp	r2, r3
 8000450:	dbf0      	blt.n	8000434 <draw_food+0x2e>
	for(int i=x0;i<x1;i++){
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	3301      	adds	r3, #1
 8000456:	61fb      	str	r3, [r7, #28]
 8000458:	69fa      	ldr	r2, [r7, #28]
 800045a:	68fb      	ldr	r3, [r7, #12]
 800045c:	429a      	cmp	r2, r3
 800045e:	dbe6      	blt.n	800042e <draw_food+0x28>
		}
	}
}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <clear_block>:

void clear_block(int x,int y){
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	6039      	str	r1, [r7, #0]
	int x0=x*8;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	00db      	lsls	r3, r3, #3
 8000476:	617b      	str	r3, [r7, #20]
	int y0=y*8;
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	00db      	lsls	r3, r3, #3
 800047c:	613b      	str	r3, [r7, #16]
	int x1=x0+8;
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	3308      	adds	r3, #8
 8000482:	60fb      	str	r3, [r7, #12]
	int y1=y0+8;
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	3308      	adds	r3, #8
 8000488:	60bb      	str	r3, [r7, #8]
	for(int i=x0;i<x1;i++){
 800048a:	697b      	ldr	r3, [r7, #20]
 800048c:	61fb      	str	r3, [r7, #28]
 800048e:	e014      	b.n	80004ba <clear_block+0x52>
		for(int j=y0;j<y1;j++){
 8000490:	693b      	ldr	r3, [r7, #16]
 8000492:	61bb      	str	r3, [r7, #24]
 8000494:	e00a      	b.n	80004ac <clear_block+0x44>
			ssd1306_DrawPixel(i,j,0x00);
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	b2db      	uxtb	r3, r3
 800049a:	69ba      	ldr	r2, [r7, #24]
 800049c:	b2d1      	uxtb	r1, r2
 800049e:	2200      	movs	r2, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fcbb 	bl	8000e1c <ssd1306_DrawPixel>
		for(int j=y0;j<y1;j++){
 80004a6:	69bb      	ldr	r3, [r7, #24]
 80004a8:	3301      	adds	r3, #1
 80004aa:	61bb      	str	r3, [r7, #24]
 80004ac:	69ba      	ldr	r2, [r7, #24]
 80004ae:	68bb      	ldr	r3, [r7, #8]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	dbf0      	blt.n	8000496 <clear_block+0x2e>
	for(int i=x0;i<x1;i++){
 80004b4:	69fb      	ldr	r3, [r7, #28]
 80004b6:	3301      	adds	r3, #1
 80004b8:	61fb      	str	r3, [r7, #28]
 80004ba:	69fa      	ldr	r2, [r7, #28]
 80004bc:	68fb      	ldr	r3, [r7, #12]
 80004be:	429a      	cmp	r2, r3
 80004c0:	dbe6      	blt.n	8000490 <clear_block+0x28>
		}
	}
}
 80004c2:	bf00      	nop
 80004c4:	3720      	adds	r7, #32
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
	...

080004cc <update_grid>:

void update_grid(){
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
	SSD1306_ClearScreen();
 80004d2:	f000 fdc1 	bl	8001058 <SSD1306_ClearScreen>
	for(int i=0;i<16;i++){
 80004d6:	2300      	movs	r3, #0
 80004d8:	607b      	str	r3, [r7, #4]
 80004da:	e02b      	b.n	8000534 <update_grid+0x68>
		for(int j=0;j<8;j++){
 80004dc:	2300      	movs	r3, #0
 80004de:	603b      	str	r3, [r7, #0]
 80004e0:	e022      	b.n	8000528 <update_grid+0x5c>
			if(draw_grid[i][j]==2){
 80004e2:	4919      	ldr	r1, [pc, #100]	; (8000548 <update_grid+0x7c>)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	00da      	lsls	r2, r3, #3
 80004e8:	683b      	ldr	r3, [r7, #0]
 80004ea:	4413      	add	r3, r2
 80004ec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	d104      	bne.n	80004fe <update_grid+0x32>
				draw_snake(i,j);
 80004f4:	6839      	ldr	r1, [r7, #0]
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f7ff ff54 	bl	80003a4 <draw_snake>
 80004fc:	e011      	b.n	8000522 <update_grid+0x56>
			}
			else if(draw_grid[i][j]==1){
 80004fe:	4912      	ldr	r1, [pc, #72]	; (8000548 <update_grid+0x7c>)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	00da      	lsls	r2, r3, #3
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	4413      	add	r3, r2
 8000508:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d104      	bne.n	800051a <update_grid+0x4e>
				draw_food(i,j);
 8000510:	6839      	ldr	r1, [r7, #0]
 8000512:	6878      	ldr	r0, [r7, #4]
 8000514:	f7ff ff77 	bl	8000406 <draw_food>
 8000518:	e003      	b.n	8000522 <update_grid+0x56>
			}
			else{
				clear_block(i,j);
 800051a:	6839      	ldr	r1, [r7, #0]
 800051c:	6878      	ldr	r0, [r7, #4]
 800051e:	f7ff ffa3 	bl	8000468 <clear_block>
		for(int j=0;j<8;j++){
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	3301      	adds	r3, #1
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	2b07      	cmp	r3, #7
 800052c:	ddd9      	ble.n	80004e2 <update_grid+0x16>
	for(int i=0;i<16;i++){
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3301      	adds	r3, #1
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	2b0f      	cmp	r3, #15
 8000538:	ddd0      	ble.n	80004dc <update_grid+0x10>
			}
		}
	}
	ssd1306_UpdateScreen();
 800053a:	f000 fc41 	bl	8000dc0 <ssd1306_UpdateScreen>
}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	20000598 	.word	0x20000598

0800054c <init_grid>:

//Fill grid with 0
void init_grid(void){
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
	for(int i=0; i<16;i++){
 8000552:	2300      	movs	r3, #0
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	e013      	b.n	8000580 <init_grid+0x34>
		for(int j=0;j<8;j++){
 8000558:	2300      	movs	r3, #0
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	e00a      	b.n	8000574 <init_grid+0x28>
			draw_grid[i][j]=0;
 800055e:	490d      	ldr	r1, [pc, #52]	; (8000594 <init_grid+0x48>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	00da      	lsls	r2, r3, #3
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	4413      	add	r3, r2
 8000568:	2200      	movs	r2, #0
 800056a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int j=0;j<8;j++){
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	3301      	adds	r3, #1
 8000572:	603b      	str	r3, [r7, #0]
 8000574:	683b      	ldr	r3, [r7, #0]
 8000576:	2b07      	cmp	r3, #7
 8000578:	ddf1      	ble.n	800055e <init_grid+0x12>
	for(int i=0; i<16;i++){
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3301      	adds	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2b0f      	cmp	r3, #15
 8000584:	dde8      	ble.n	8000558 <init_grid+0xc>
		}
	}
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	20000598 	.word	0x20000598

08000598 <move_snake>:

void move_snake(){
 8000598:	b480      	push	{r7}
 800059a:	b087      	sub	sp, #28
 800059c:	af00      	add	r7, sp, #0
		for(int i=size_of_snake-1;i>=0;i--){
 800059e:	4b52      	ldr	r3, [pc, #328]	; (80006e8 <move_snake+0x150>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	617b      	str	r3, [r7, #20]
 80005a6:	e011      	b.n	80005cc <move_snake+0x34>
			draw_grid[snake_pos[0][i]][snake_pos[1][i]]=0;
 80005a8:	4a50      	ldr	r2, [pc, #320]	; (80006ec <move_snake+0x154>)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005b0:	494e      	ldr	r1, [pc, #312]	; (80006ec <move_snake+0x154>)
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	3314      	adds	r3, #20
 80005b6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005ba:	494d      	ldr	r1, [pc, #308]	; (80006f0 <move_snake+0x158>)
 80005bc:	00d2      	lsls	r2, r2, #3
 80005be:	4413      	add	r3, r2
 80005c0:	2200      	movs	r2, #0
 80005c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=size_of_snake-1;i>=0;i--){
 80005c6:	697b      	ldr	r3, [r7, #20]
 80005c8:	3b01      	subs	r3, #1
 80005ca:	617b      	str	r3, [r7, #20]
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	daea      	bge.n	80005a8 <move_snake+0x10>
		}
		old_poshx=snake_pos[0][size_of_snake-1];
 80005d2:	4b45      	ldr	r3, [pc, #276]	; (80006e8 <move_snake+0x150>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	4a44      	ldr	r2, [pc, #272]	; (80006ec <move_snake+0x154>)
 80005da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005de:	4a45      	ldr	r2, [pc, #276]	; (80006f4 <move_snake+0x15c>)
 80005e0:	6013      	str	r3, [r2, #0]
		old_poshy=snake_pos[1][size_of_snake-1];
 80005e2:	4b41      	ldr	r3, [pc, #260]	; (80006e8 <move_snake+0x150>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3b01      	subs	r3, #1
 80005e8:	4a40      	ldr	r2, [pc, #256]	; (80006ec <move_snake+0x154>)
 80005ea:	3314      	adds	r3, #20
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	4a41      	ldr	r2, [pc, #260]	; (80006f8 <move_snake+0x160>)
 80005f2:	6013      	str	r3, [r2, #0]
		snake_pos[0][size_of_snake-1]=snake_pos[0][size_of_snake-1]+snake_speed[0];
 80005f4:	4b3c      	ldr	r3, [pc, #240]	; (80006e8 <move_snake+0x150>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	3b01      	subs	r3, #1
 80005fa:	4a3c      	ldr	r2, [pc, #240]	; (80006ec <move_snake+0x154>)
 80005fc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000600:	4b3e      	ldr	r3, [pc, #248]	; (80006fc <move_snake+0x164>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b38      	ldr	r3, [pc, #224]	; (80006e8 <move_snake+0x150>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	3b01      	subs	r3, #1
 800060a:	440a      	add	r2, r1
 800060c:	4937      	ldr	r1, [pc, #220]	; (80006ec <move_snake+0x154>)
 800060e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		snake_pos[1][size_of_snake-1]=snake_pos[1][size_of_snake-1]+snake_speed[1];
 8000612:	4b35      	ldr	r3, [pc, #212]	; (80006e8 <move_snake+0x150>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	3b01      	subs	r3, #1
 8000618:	4a34      	ldr	r2, [pc, #208]	; (80006ec <move_snake+0x154>)
 800061a:	3314      	adds	r3, #20
 800061c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000620:	4b36      	ldr	r3, [pc, #216]	; (80006fc <move_snake+0x164>)
 8000622:	685a      	ldr	r2, [r3, #4]
 8000624:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <move_snake+0x150>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	3b01      	subs	r3, #1
 800062a:	440a      	add	r2, r1
 800062c:	492f      	ldr	r1, [pc, #188]	; (80006ec <move_snake+0x154>)
 800062e:	3314      	adds	r3, #20
 8000630:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		pos_head[0]=snake_pos[0][size_of_snake-1];
 8000634:	4b2c      	ldr	r3, [pc, #176]	; (80006e8 <move_snake+0x150>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	3b01      	subs	r3, #1
 800063a:	4a2c      	ldr	r2, [pc, #176]	; (80006ec <move_snake+0x154>)
 800063c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000640:	4a2f      	ldr	r2, [pc, #188]	; (8000700 <move_snake+0x168>)
 8000642:	6013      	str	r3, [r2, #0]
		pos_head[1]=snake_pos[1][size_of_snake-1];
 8000644:	4b28      	ldr	r3, [pc, #160]	; (80006e8 <move_snake+0x150>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	3b01      	subs	r3, #1
 800064a:	4a28      	ldr	r2, [pc, #160]	; (80006ec <move_snake+0x154>)
 800064c:	3314      	adds	r3, #20
 800064e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000652:	4a2b      	ldr	r2, [pc, #172]	; (8000700 <move_snake+0x168>)
 8000654:	6053      	str	r3, [r2, #4]
		for(int i=size_of_snake-2;i>=0;i--){
 8000656:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <move_snake+0x150>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3b02      	subs	r3, #2
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	e020      	b.n	80006a2 <move_snake+0x10a>
			int nx = snake_pos[0][i];
 8000660:	4a22      	ldr	r2, [pc, #136]	; (80006ec <move_snake+0x154>)
 8000662:	693b      	ldr	r3, [r7, #16]
 8000664:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000668:	60bb      	str	r3, [r7, #8]
			int ny = snake_pos[1][i];
 800066a:	4a20      	ldr	r2, [pc, #128]	; (80006ec <move_snake+0x154>)
 800066c:	693b      	ldr	r3, [r7, #16]
 800066e:	3314      	adds	r3, #20
 8000670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000674:	607b      	str	r3, [r7, #4]
			snake_pos[0][i]=old_poshx;
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <move_snake+0x15c>)
 8000678:	681a      	ldr	r2, [r3, #0]
 800067a:	491c      	ldr	r1, [pc, #112]	; (80006ec <move_snake+0x154>)
 800067c:	693b      	ldr	r3, [r7, #16]
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			snake_pos[1][i]=old_poshy;
 8000682:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <move_snake+0x160>)
 8000684:	681a      	ldr	r2, [r3, #0]
 8000686:	4919      	ldr	r1, [pc, #100]	; (80006ec <move_snake+0x154>)
 8000688:	693b      	ldr	r3, [r7, #16]
 800068a:	3314      	adds	r3, #20
 800068c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			old_poshx=nx;
 8000690:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <move_snake+0x15c>)
 8000692:	68bb      	ldr	r3, [r7, #8]
 8000694:	6013      	str	r3, [r2, #0]
			old_poshy=ny;
 8000696:	4a18      	ldr	r2, [pc, #96]	; (80006f8 <move_snake+0x160>)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	6013      	str	r3, [r2, #0]
		for(int i=size_of_snake-2;i>=0;i--){
 800069c:	693b      	ldr	r3, [r7, #16]
 800069e:	3b01      	subs	r3, #1
 80006a0:	613b      	str	r3, [r7, #16]
 80006a2:	693b      	ldr	r3, [r7, #16]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	dadb      	bge.n	8000660 <move_snake+0xc8>
		}
		for(int i=size_of_snake-1;i>=0;i--){
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <move_snake+0x150>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	e011      	b.n	80006d6 <move_snake+0x13e>
			draw_grid[snake_pos[0][i]][snake_pos[1][i]]=2;
 80006b2:	4a0e      	ldr	r2, [pc, #56]	; (80006ec <move_snake+0x154>)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ba:	490c      	ldr	r1, [pc, #48]	; (80006ec <move_snake+0x154>)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	3314      	adds	r3, #20
 80006c0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006c4:	490a      	ldr	r1, [pc, #40]	; (80006f0 <move_snake+0x158>)
 80006c6:	00d2      	lsls	r2, r2, #3
 80006c8:	4413      	add	r3, r2
 80006ca:	2202      	movs	r2, #2
 80006cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i=size_of_snake-1;i>=0;i--){
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	daea      	bge.n	80006b2 <move_snake+0x11a>
		}
}
 80006dc:	bf00      	nop
 80006de:	371c      	adds	r7, #28
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	20000008 	.word	0x20000008
 80006ec:	200004f4 	.word	0x200004f4
 80006f0:	20000598 	.word	0x20000598
 80006f4:	200007a4 	.word	0x200007a4
 80006f8:	20000798 	.word	0x20000798
 80006fc:	20000000 	.word	0x20000000
 8000700:	2000079c 	.word	0x2000079c

08000704 <re_init>:

void re_init(void){
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	init_grid();
 8000708:	f7ff ff20 	bl	800054c <init_grid>
	draw_grid[0][0]=2;
 800070c:	4b16      	ldr	r3, [pc, #88]	; (8000768 <re_init+0x64>)
 800070e:	2202      	movs	r2, #2
 8000710:	601a      	str	r2, [r3, #0]
	draw_grid[1][0]=2;
 8000712:	4b15      	ldr	r3, [pc, #84]	; (8000768 <re_init+0x64>)
 8000714:	2202      	movs	r2, #2
 8000716:	621a      	str	r2, [r3, #32]
	snake_pos[0][0]=0;
 8000718:	4b14      	ldr	r3, [pc, #80]	; (800076c <re_init+0x68>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
	snake_pos[1][0]=0;
 800071e:	4b13      	ldr	r3, [pc, #76]	; (800076c <re_init+0x68>)
 8000720:	2200      	movs	r2, #0
 8000722:	651a      	str	r2, [r3, #80]	; 0x50
	snake_pos[0][1]=1;
 8000724:	4b11      	ldr	r3, [pc, #68]	; (800076c <re_init+0x68>)
 8000726:	2201      	movs	r2, #1
 8000728:	605a      	str	r2, [r3, #4]
	snake_pos[1][1]=0;
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <re_init+0x68>)
 800072c:	2200      	movs	r2, #0
 800072e:	655a      	str	r2, [r3, #84]	; 0x54
	size_of_snake=2;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <re_init+0x6c>)
 8000732:	2202      	movs	r2, #2
 8000734:	601a      	str	r2, [r3, #0]
	snake_speed[0]=1;
 8000736:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <re_init+0x70>)
 8000738:	2201      	movs	r2, #1
 800073a:	601a      	str	r2, [r3, #0]
	snake_speed[1]=0;
 800073c:	4b0d      	ldr	r3, [pc, #52]	; (8000774 <re_init+0x70>)
 800073e:	2200      	movs	r2, #0
 8000740:	605a      	str	r2, [r3, #4]
	sw_up=true;
 8000742:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <re_init+0x74>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
	sw_down=true;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <re_init+0x78>)
 800074a:	2201      	movs	r2, #1
 800074c:	701a      	strb	r2, [r3, #0]
	sw_right=true;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <re_init+0x7c>)
 8000750:	2201      	movs	r2, #1
 8000752:	701a      	strb	r2, [r3, #0]
	sw_left=true;
 8000754:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <re_init+0x80>)
 8000756:	2201      	movs	r2, #1
 8000758:	701a      	strb	r2, [r3, #0]
	score=0;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <re_init+0x84>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
	spawn_food();
 8000760:	f000 f814 	bl	800078c <spawn_food>
}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	20000598 	.word	0x20000598
 800076c:	200004f4 	.word	0x200004f4
 8000770:	20000008 	.word	0x20000008
 8000774:	20000000 	.word	0x20000000
 8000778:	200000b4 	.word	0x200000b4
 800077c:	200000b5 	.word	0x200000b5
 8000780:	200000b6 	.word	0x200000b6
 8000784:	200000b7 	.word	0x200000b7
 8000788:	20000594 	.word	0x20000594

0800078c <spawn_food>:

void spawn_food(void){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	int xf=rand_no(15);
 8000792:	200f      	movs	r0, #15
 8000794:	f000 f826 	bl	80007e4 <rand_no>
 8000798:	6078      	str	r0, [r7, #4]
	int yf=rand_no(7);
 800079a:	2007      	movs	r0, #7
 800079c:	f000 f822 	bl	80007e4 <rand_no>
 80007a0:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 80007a2:	e007      	b.n	80007b4 <spawn_food+0x28>
		xf=rand_no(15);
 80007a4:	200f      	movs	r0, #15
 80007a6:	f000 f81d 	bl	80007e4 <rand_no>
 80007aa:	6078      	str	r0, [r7, #4]
		yf=rand_no(7);
 80007ac:	2007      	movs	r0, #7
 80007ae:	f000 f819 	bl	80007e4 <rand_no>
 80007b2:	6038      	str	r0, [r7, #0]
	while(draw_grid[xf][yf]==2){
 80007b4:	490a      	ldr	r1, [pc, #40]	; (80007e0 <spawn_food+0x54>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	00da      	lsls	r2, r3, #3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	4413      	add	r3, r2
 80007be:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d0ee      	beq.n	80007a4 <spawn_food+0x18>
	}
	draw_grid[xf][yf]=1;
 80007c6:	4906      	ldr	r1, [pc, #24]	; (80007e0 <spawn_food+0x54>)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	00da      	lsls	r2, r3, #3
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000598 	.word	0x20000598

080007e4 <rand_no>:

int rand_no(int m){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
	int num = (rand()%(m+1));
 80007ec:	f001 f95a 	bl	8001aa4 <rand>
 80007f0:	4602      	mov	r2, r0
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3301      	adds	r3, #1
 80007f6:	fb92 f1f3 	sdiv	r1, r2, r3
 80007fa:	fb03 f301 	mul.w	r3, r3, r1
 80007fe:	1ad3      	subs	r3, r2, r3
 8000800:	60fb      	str	r3, [r7, #12]
	return num;
 8000802:	68fb      	ldr	r3, [r7, #12]
}
 8000804:	4618      	mov	r0, r3
 8000806:	3710      	adds	r7, #16
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}

0800080c <check_collision>:

void check_collision(void){
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
	if(pos_head[0]>=16 || pos_head[0]<0){
 8000810:	4b17      	ldr	r3, [pc, #92]	; (8000870 <check_collision+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	2b0f      	cmp	r3, #15
 8000816:	dc03      	bgt.n	8000820 <check_collision+0x14>
 8000818:	4b15      	ldr	r3, [pc, #84]	; (8000870 <check_collision+0x64>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	2b00      	cmp	r3, #0
 800081e:	da03      	bge.n	8000828 <check_collision+0x1c>
		game_over_screen();
 8000820:	f000 f90a 	bl	8000a38 <game_over_screen>
		re_init();
 8000824:	f7ff ff6e 	bl	8000704 <re_init>
	}
	if(pos_head[1]>=8 || pos_head[1]<0){
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <check_collision+0x64>)
 800082a:	685b      	ldr	r3, [r3, #4]
 800082c:	2b07      	cmp	r3, #7
 800082e:	dc03      	bgt.n	8000838 <check_collision+0x2c>
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <check_collision+0x64>)
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	2b00      	cmp	r3, #0
 8000836:	da03      	bge.n	8000840 <check_collision+0x34>
		game_over_screen();
 8000838:	f000 f8fe 	bl	8000a38 <game_over_screen>
		re_init();
 800083c:	f7ff ff62 	bl	8000704 <re_init>
	}
	if(draw_grid[pos_head[0]+snake_speed[0]][pos_head[1]+snake_speed[1]]==2){
 8000840:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <check_collision+0x64>)
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <check_collision+0x68>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	441a      	add	r2, r3
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <check_collision+0x64>)
 800084c:	6859      	ldr	r1, [r3, #4]
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <check_collision+0x68>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	440b      	add	r3, r1
 8000854:	4908      	ldr	r1, [pc, #32]	; (8000878 <check_collision+0x6c>)
 8000856:	00d2      	lsls	r2, r2, #3
 8000858:	4413      	add	r3, r2
 800085a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800085e:	2b02      	cmp	r3, #2
 8000860:	d103      	bne.n	800086a <check_collision+0x5e>
		game_over_screen();
 8000862:	f000 f8e9 	bl	8000a38 <game_over_screen>
		re_init();
 8000866:	f7ff ff4d 	bl	8000704 <re_init>
	}
}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	2000079c 	.word	0x2000079c
 8000874:	20000000 	.word	0x20000000
 8000878:	20000598 	.word	0x20000598

0800087c <wait_check>:

void wait_check(void){
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
	for(int i=0;i<45;i++){
 8000882:	2300      	movs	r3, #0
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	e07f      	b.n	8000988 <wait_check+0x10c>
		sw_down=GPIO_ReadFromInputPin(GPIOD,GPIO_PIN_NO_1);
 8000888:	2101      	movs	r1, #1
 800088a:	4843      	ldr	r0, [pc, #268]	; (8000998 <wait_check+0x11c>)
 800088c:	f000 fe24 	bl	80014d8 <GPIO_ReadFromInputPin>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	bf14      	ite	ne
 8000896:	2301      	movne	r3, #1
 8000898:	2300      	moveq	r3, #0
 800089a:	b2da      	uxtb	r2, r3
 800089c:	4b3f      	ldr	r3, [pc, #252]	; (800099c <wait_check+0x120>)
 800089e:	701a      	strb	r2, [r3, #0]
		if(sw_down==false && snake_speed[1]==0){
 80008a0:	4b3e      	ldr	r3, [pc, #248]	; (800099c <wait_check+0x120>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	f083 0301 	eor.w	r3, r3, #1
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d00a      	beq.n	80008c4 <wait_check+0x48>
 80008ae:	4b3c      	ldr	r3, [pc, #240]	; (80009a0 <wait_check+0x124>)
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d106      	bne.n	80008c4 <wait_check+0x48>
			snake_speed[0]=0;
 80008b6:	4b3a      	ldr	r3, [pc, #232]	; (80009a0 <wait_check+0x124>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
			snake_speed[1]=1;
 80008bc:	4b38      	ldr	r3, [pc, #224]	; (80009a0 <wait_check+0x124>)
 80008be:	2201      	movs	r2, #1
 80008c0:	605a      	str	r2, [r3, #4]
			break;
 80008c2:	e065      	b.n	8000990 <wait_check+0x114>
		}
		sw_up=GPIO_ReadFromInputPin(GPIOD,GPIO_PIN_NO_3);
 80008c4:	2103      	movs	r1, #3
 80008c6:	4834      	ldr	r0, [pc, #208]	; (8000998 <wait_check+0x11c>)
 80008c8:	f000 fe06 	bl	80014d8 <GPIO_ReadFromInputPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	bf14      	ite	ne
 80008d2:	2301      	movne	r3, #1
 80008d4:	2300      	moveq	r3, #0
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b32      	ldr	r3, [pc, #200]	; (80009a4 <wait_check+0x128>)
 80008da:	701a      	strb	r2, [r3, #0]
		if(sw_up==false && snake_speed[1]==0){
 80008dc:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <wait_check+0x128>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	f083 0301 	eor.w	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d00b      	beq.n	8000902 <wait_check+0x86>
 80008ea:	4b2d      	ldr	r3, [pc, #180]	; (80009a0 <wait_check+0x124>)
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d107      	bne.n	8000902 <wait_check+0x86>
			snake_speed[0]=0;
 80008f2:	4b2b      	ldr	r3, [pc, #172]	; (80009a0 <wait_check+0x124>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
			snake_speed[1]=-1;
 80008f8:	4b29      	ldr	r3, [pc, #164]	; (80009a0 <wait_check+0x124>)
 80008fa:	f04f 32ff 	mov.w	r2, #4294967295
 80008fe:	605a      	str	r2, [r3, #4]
			break;
 8000900:	e046      	b.n	8000990 <wait_check+0x114>
		}
		sw_right=GPIO_ReadFromInputPin(GPIOD,GPIO_PIN_NO_0);
 8000902:	2100      	movs	r1, #0
 8000904:	4824      	ldr	r0, [pc, #144]	; (8000998 <wait_check+0x11c>)
 8000906:	f000 fde7 	bl	80014d8 <GPIO_ReadFromInputPin>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b24      	ldr	r3, [pc, #144]	; (80009a8 <wait_check+0x12c>)
 8000918:	701a      	strb	r2, [r3, #0]
		if(sw_right==false && snake_speed[0]==0){
 800091a:	4b23      	ldr	r3, [pc, #140]	; (80009a8 <wait_check+0x12c>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	f083 0301 	eor.w	r3, r3, #1
 8000922:	b2db      	uxtb	r3, r3
 8000924:	2b00      	cmp	r3, #0
 8000926:	d00a      	beq.n	800093e <wait_check+0xc2>
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <wait_check+0x124>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d106      	bne.n	800093e <wait_check+0xc2>
			snake_speed[0]=1;
 8000930:	4b1b      	ldr	r3, [pc, #108]	; (80009a0 <wait_check+0x124>)
 8000932:	2201      	movs	r2, #1
 8000934:	601a      	str	r2, [r3, #0]
			snake_speed[1]=0;
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <wait_check+0x124>)
 8000938:	2200      	movs	r2, #0
 800093a:	605a      	str	r2, [r3, #4]
			break;
 800093c:	e028      	b.n	8000990 <wait_check+0x114>
		}
		sw_left=GPIO_ReadFromInputPin(GPIOD,GPIO_PIN_NO_2);
 800093e:	2102      	movs	r1, #2
 8000940:	4815      	ldr	r0, [pc, #84]	; (8000998 <wait_check+0x11c>)
 8000942:	f000 fdc9 	bl	80014d8 <GPIO_ReadFromInputPin>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	bf14      	ite	ne
 800094c:	2301      	movne	r3, #1
 800094e:	2300      	moveq	r3, #0
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <wait_check+0x130>)
 8000954:	701a      	strb	r2, [r3, #0]
		if(sw_left==false && snake_speed[0]==0){
 8000956:	4b15      	ldr	r3, [pc, #84]	; (80009ac <wait_check+0x130>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	f083 0301 	eor.w	r3, r3, #1
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d00b      	beq.n	800097c <wait_check+0x100>
 8000964:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <wait_check+0x124>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d107      	bne.n	800097c <wait_check+0x100>
			snake_speed[0]=-1;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <wait_check+0x124>)
 800096e:	f04f 32ff 	mov.w	r2, #4294967295
 8000972:	601a      	str	r2, [r3, #0]
			snake_speed[1]=0;
 8000974:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <wait_check+0x124>)
 8000976:	2200      	movs	r2, #0
 8000978:	605a      	str	r2, [r3, #4]
			break;
 800097a:	e009      	b.n	8000990 <wait_check+0x114>
		}
		DelayMs(5);
 800097c:	2005      	movs	r0, #5
 800097e:	f001 f855 	bl	8001a2c <DelayMs>
	for(int i=0;i<45;i++){
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3301      	adds	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	2b2c      	cmp	r3, #44	; 0x2c
 800098c:	f77f af7c 	ble.w	8000888 <wait_check+0xc>
	}
}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	40020c00 	.word	0x40020c00
 800099c:	200000b5 	.word	0x200000b5
 80009a0:	20000000 	.word	0x20000000
 80009a4:	200000b4 	.word	0x200000b4
 80009a8:	200000b6 	.word	0x200000b6
 80009ac:	200000b7 	.word	0x200000b7

080009b0 <check_food>:
void check_food(void){
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	if(draw_grid[pos_head[0]+snake_speed[0]][pos_head[1]+snake_speed[1]]==1){
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <check_food+0x70>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b1a      	ldr	r3, [pc, #104]	; (8000a24 <check_food+0x74>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	441a      	add	r2, r3
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <check_food+0x70>)
 80009c0:	6859      	ldr	r1, [r3, #4]
 80009c2:	4b18      	ldr	r3, [pc, #96]	; (8000a24 <check_food+0x74>)
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	440b      	add	r3, r1
 80009c8:	4917      	ldr	r1, [pc, #92]	; (8000a28 <check_food+0x78>)
 80009ca:	00d2      	lsls	r2, r2, #3
 80009cc:	4413      	add	r3, r2
 80009ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d122      	bne.n	8000a1c <check_food+0x6c>
		score++;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <check_food+0x7c>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	3301      	adds	r3, #1
 80009dc:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <check_food+0x7c>)
 80009de:	6013      	str	r3, [r2, #0]
		size_of_snake++;
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <check_food+0x80>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	3301      	adds	r3, #1
 80009e6:	4a12      	ldr	r2, [pc, #72]	; (8000a30 <check_food+0x80>)
 80009e8:	6013      	str	r3, [r2, #0]
		snake_pos[0][size_of_snake-1]=pos_head[0]+snake_speed[0];
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <check_food+0x70>)
 80009ec:	6819      	ldr	r1, [r3, #0]
 80009ee:	4b0d      	ldr	r3, [pc, #52]	; (8000a24 <check_food+0x74>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <check_food+0x80>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	3b01      	subs	r3, #1
 80009f8:	440a      	add	r2, r1
 80009fa:	490e      	ldr	r1, [pc, #56]	; (8000a34 <check_food+0x84>)
 80009fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		snake_pos[1][size_of_snake-1]=pos_head[1]+snake_speed[1];
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <check_food+0x70>)
 8000a02:	6859      	ldr	r1, [r3, #4]
 8000a04:	4b07      	ldr	r3, [pc, #28]	; (8000a24 <check_food+0x74>)
 8000a06:	685a      	ldr	r2, [r3, #4]
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <check_food+0x80>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3b01      	subs	r3, #1
 8000a0e:	440a      	add	r2, r1
 8000a10:	4908      	ldr	r1, [pc, #32]	; (8000a34 <check_food+0x84>)
 8000a12:	3314      	adds	r3, #20
 8000a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		spawn_food();
 8000a18:	f7ff feb8 	bl	800078c <spawn_food>
	}
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000079c 	.word	0x2000079c
 8000a24:	20000000 	.word	0x20000000
 8000a28:	20000598 	.word	0x20000598
 8000a2c:	20000594 	.word	0x20000594
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200004f4 	.word	0x200004f4

08000a38 <game_over_screen>:

void game_over_screen(void){
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	SSD1306_ClearScreen();
 8000a3e:	f000 fb0b 	bl	8001058 <SSD1306_ClearScreen>
	ssd1306_SetCursor(16,20);
 8000a42:	2114      	movs	r1, #20
 8000a44:	2010      	movs	r0, #16
 8000a46:	f000 faef 	bl	8001028 <ssd1306_SetCursor>
	ssd1306_WriteString("Game Over", Font_11x18, 0x01);
 8000a4a:	4a14      	ldr	r2, [pc, #80]	; (8000a9c <game_over_screen+0x64>)
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	ca06      	ldmia	r2, {r1, r2}
 8000a50:	4813      	ldr	r0, [pc, #76]	; (8000aa0 <game_over_screen+0x68>)
 8000a52:	f000 fac3 	bl	8000fdc <ssd1306_WriteString>
	ssd1306_SetCursor(16,40);
 8000a56:	2128      	movs	r1, #40	; 0x28
 8000a58:	2010      	movs	r0, #16
 8000a5a:	f000 fae5 	bl	8001028 <ssd1306_SetCursor>
	ssd1306_WriteString("Score: ", Font_11x18, 0x01);
 8000a5e:	4a0f      	ldr	r2, [pc, #60]	; (8000a9c <game_over_screen+0x64>)
 8000a60:	2301      	movs	r3, #1
 8000a62:	ca06      	ldmia	r2, {r1, r2}
 8000a64:	480f      	ldr	r0, [pc, #60]	; (8000aa4 <game_over_screen+0x6c>)
 8000a66:	f000 fab9 	bl	8000fdc <ssd1306_WriteString>
	ssd1306_SetCursor(80,40);
 8000a6a:	2128      	movs	r1, #40	; 0x28
 8000a6c:	2050      	movs	r0, #80	; 0x50
 8000a6e:	f000 fadb 	bl	8001028 <ssd1306_SetCursor>
	char sc1=score+'0';
 8000a72:	4b0d      	ldr	r3, [pc, #52]	; (8000aa8 <game_over_screen+0x70>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	3330      	adds	r3, #48	; 0x30
 8000a7a:	71fb      	strb	r3, [r7, #7]
	ssd1306_WriteChar(sc1, Font_11x18,0x01);
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <game_over_screen+0x64>)
 8000a7e:	79f8      	ldrb	r0, [r7, #7]
 8000a80:	2301      	movs	r3, #1
 8000a82:	ca06      	ldmia	r2, {r1, r2}
 8000a84:	f000 fa2a 	bl	8000edc <ssd1306_WriteChar>
	ssd1306_UpdateScreen();
 8000a88:	f000 f99a 	bl	8000dc0 <ssd1306_UpdateScreen>
	DelayMs(1000);
 8000a8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a90:	f000 ffcc 	bl	8001a2c <DelayMs>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	2000000c 	.word	0x2000000c
 8000aa0:	08001c0c 	.word	0x08001c0c
 8000aa4:	08001c18 	.word	0x08001c18
 8000aa8:	20000594 	.word	0x20000594

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d207      	bcs.n	8000aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000adc:	f000 ffb8 	bl	8001a50 <__errno>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	230c      	movs	r3, #12
 8000ae4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	e009      	b.n	8000b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <_sbrk+0x64>)
 8000afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20020000 	.word	0x20020000
 8000b0c:	00000400 	.word	0x00000400
 8000b10:	200000b8 	.word	0x200000b8
 8000b14:	200007b0 	.word	0x200007b0

08000b18 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b1c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b22:	490d      	ldr	r1, [pc, #52]	; (8000b58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <LoopForever+0xe>)
  movs r3, #0
 8000b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b28:	e002      	b.n	8000b30 <LoopCopyDataInit>

08000b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b2e:	3304      	adds	r3, #4

08000b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b34:	d3f9      	bcc.n	8000b2a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b36:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b38:	4c0a      	ldr	r4, [pc, #40]	; (8000b64 <LoopForever+0x16>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b3c:	e001      	b.n	8000b42 <LoopFillZerobss>

08000b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b40:	3204      	adds	r2, #4

08000b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b44:	d3fb      	bcc.n	8000b3e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b46:	f000 ff89 	bl	8001a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4a:	f7ff fbcb 	bl	80002e4 <main>

08000b4e <LoopForever>:

LoopForever:
    b LoopForever
 8000b4e:	e7fe      	b.n	8000b4e <LoopForever>
  ldr   r0, =_estack
 8000b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b58:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000b5c:	08002984 	.word	0x08002984
  ldr r2, =_sbss
 8000b60:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000b64:	200007ac 	.word	0x200007ac

08000b68 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b68:	e7fe      	b.n	8000b68 <ADC_IRQHandler>
	...

08000b6c <ssd1306_I2C_Write>:
#define ssd1306_WriteCommand(command)      ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x00, (command))
/* Write data */
#define SSD1306_WRITEDATA(data)            ssd1306_I2C_Write(SSD1306_I2C_ADDR, 0x40, (data))


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b086      	sub	sp, #24
 8000b70:	af02      	add	r7, sp, #8
 8000b72:	4603      	mov	r3, r0
 8000b74:	71fb      	strb	r3, [r7, #7]
 8000b76:	460b      	mov	r3, r1
 8000b78:	71bb      	strb	r3, [r7, #6]
 8000b7a:	4613      	mov	r3, r2
 8000b7c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000b7e:	79bb      	ldrb	r3, [r7, #6]
 8000b80:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000b82:	797b      	ldrb	r3, [r7, #5]
 8000b84:	737b      	strb	r3, [r7, #13]
	I2C_MasterSendData(&I2C1Handle,dt,2,address,0);
 8000b86:	79fa      	ldrb	r2, [r7, #7]
 8000b88:	f107 010c 	add.w	r1, r7, #12
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	4613      	mov	r3, r2
 8000b92:	2202      	movs	r2, #2
 8000b94:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <ssd1306_I2C_Write+0x38>)
 8000b96:	f000 fe39 	bl	800180c <I2C_MasterSendData>
}
 8000b9a:	bf00      	nop
 8000b9c:	3710      	adds	r7, #16
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	200004cc 	.word	0x200004cc

08000ba8 <ssd1306_I2C_WriteMulti>:


void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000ba8:	b590      	push	{r4, r7, lr}
 8000baa:	b0c7      	sub	sp, #284	; 0x11c
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	4604      	mov	r4, r0
 8000bb0:	4608      	mov	r0, r1
 8000bb2:	4639      	mov	r1, r7
 8000bb4:	600a      	str	r2, [r1, #0]
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	1dfb      	adds	r3, r7, #7
 8000bba:	4622      	mov	r2, r4
 8000bbc:	701a      	strb	r2, [r3, #0]
 8000bbe:	1dbb      	adds	r3, r7, #6
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	701a      	strb	r2, [r3, #0]
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	460a      	mov	r2, r1
 8000bc8:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	1dba      	adds	r2, r7, #6
 8000bd0:	7812      	ldrb	r2, [r2, #0]
 8000bd2:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000bda:	e010      	b.n	8000bfe <ssd1306_I2C_WriteMulti+0x56>
	dt[i+1] = data[i];
 8000bdc:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000be0:	463a      	mov	r2, r7
 8000be2:	6812      	ldr	r2, [r2, #0]
 8000be4:	441a      	add	r2, r3
 8000be6:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bea:	3301      	adds	r3, #1
 8000bec:	7811      	ldrb	r1, [r2, #0]
 8000bee:	f107 020c 	add.w	r2, r7, #12
 8000bf2:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8000bf4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000bf8:	3301      	adds	r3, #1
 8000bfa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8000bfe:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	1d3a      	adds	r2, r7, #4
 8000c06:	8812      	ldrh	r2, [r2, #0]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d8e7      	bhi.n	8000bdc <ssd1306_I2C_WriteMulti+0x34>
	I2C_MasterSendData(&I2C1Handle,dt,count+1,address,0);
 8000c0c:	1d3b      	adds	r3, r7, #4
 8000c0e:	881b      	ldrh	r3, [r3, #0]
 8000c10:	3301      	adds	r3, #1
 8000c12:	4618      	mov	r0, r3
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	781a      	ldrb	r2, [r3, #0]
 8000c18:	f107 010c 	add.w	r1, r7, #12
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	9300      	str	r3, [sp, #0]
 8000c20:	4613      	mov	r3, r2
 8000c22:	4602      	mov	r2, r0
 8000c24:	4803      	ldr	r0, [pc, #12]	; (8000c34 <ssd1306_I2C_WriteMulti+0x8c>)
 8000c26:	f000 fdf1 	bl	800180c <I2C_MasterSendData>
}
 8000c2a:	bf00      	nop
 8000c2c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	200004cc 	.word	0x200004cc

08000c38 <ssd1306_Init>:

//
//	Initialize the oled screen
//
uint8_t ssd1306_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	// Wait for the screen to boot
	//delay_init();
	//delay(100);

	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8000c3c:	22ae      	movs	r2, #174	; 0xae
 8000c3e:	2100      	movs	r1, #0
 8000c40:	2078      	movs	r0, #120	; 0x78
 8000c42:	f7ff ff93 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c46:	2220      	movs	r2, #32
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2078      	movs	r0, #120	; 0x78
 8000c4c:	f7ff ff8e 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000c50:	2210      	movs	r2, #16
 8000c52:	2100      	movs	r1, #0
 8000c54:	2078      	movs	r0, #120	; 0x78
 8000c56:	f7ff ff89 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c5a:	22b0      	movs	r2, #176	; 0xb0
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	2078      	movs	r0, #120	; 0x78
 8000c60:	f7ff ff84 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c64:	22c8      	movs	r2, #200	; 0xc8
 8000c66:	2100      	movs	r1, #0
 8000c68:	2078      	movs	r0, #120	; 0x78
 8000c6a:	f7ff ff7f 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x00); //---set low column address
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2100      	movs	r1, #0
 8000c72:	2078      	movs	r0, #120	; 0x78
 8000c74:	f7ff ff7a 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x10); //---set high column address
 8000c78:	2210      	movs	r2, #16
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	2078      	movs	r0, #120	; 0x78
 8000c7e:	f7ff ff75 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x40); //--set start line address
 8000c82:	2240      	movs	r2, #64	; 0x40
 8000c84:	2100      	movs	r1, #0
 8000c86:	2078      	movs	r0, #120	; 0x78
 8000c88:	f7ff ff70 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x81); //--set contrast control register
 8000c8c:	2281      	movs	r2, #129	; 0x81
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2078      	movs	r0, #120	; 0x78
 8000c92:	f7ff ff6b 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xFF);
 8000c96:	22ff      	movs	r2, #255	; 0xff
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2078      	movs	r0, #120	; 0x78
 8000c9c:	f7ff ff66 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127
 8000ca0:	22a1      	movs	r2, #161	; 0xa1
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2078      	movs	r0, #120	; 0x78
 8000ca6:	f7ff ff61 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xA6); //--set normal display
 8000caa:	22a6      	movs	r2, #166	; 0xa6
 8000cac:	2100      	movs	r1, #0
 8000cae:	2078      	movs	r0, #120	; 0x78
 8000cb0:	f7ff ff5c 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8000cb4:	22a8      	movs	r2, #168	; 0xa8
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2078      	movs	r0, #120	; 0x78
 8000cba:	f7ff ff57 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x3F); //
 8000cbe:	223f      	movs	r2, #63	; 0x3f
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	2078      	movs	r0, #120	; 0x78
 8000cc4:	f7ff ff52 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000cc8:	22a4      	movs	r2, #164	; 0xa4
 8000cca:	2100      	movs	r1, #0
 8000ccc:	2078      	movs	r0, #120	; 0x78
 8000cce:	f7ff ff4d 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xD3); //-set display offset
 8000cd2:	22d3      	movs	r2, #211	; 0xd3
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	2078      	movs	r0, #120	; 0x78
 8000cd8:	f7ff ff48 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x00); //-not offset
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2078      	movs	r0, #120	; 0x78
 8000ce2:	f7ff ff43 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000ce6:	22d5      	movs	r2, #213	; 0xd5
 8000ce8:	2100      	movs	r1, #0
 8000cea:	2078      	movs	r0, #120	; 0x78
 8000cec:	f7ff ff3e 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000cf0:	22f0      	movs	r2, #240	; 0xf0
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	2078      	movs	r0, #120	; 0x78
 8000cf6:	f7ff ff39 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000cfa:	22d9      	movs	r2, #217	; 0xd9
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	2078      	movs	r0, #120	; 0x78
 8000d00:	f7ff ff34 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x22); //
 8000d04:	2222      	movs	r2, #34	; 0x22
 8000d06:	2100      	movs	r1, #0
 8000d08:	2078      	movs	r0, #120	; 0x78
 8000d0a:	f7ff ff2f 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 8000d0e:	22da      	movs	r2, #218	; 0xda
 8000d10:	2100      	movs	r1, #0
 8000d12:	2078      	movs	r0, #120	; 0x78
 8000d14:	f7ff ff2a 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x12);
 8000d18:	2212      	movs	r2, #18
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	2078      	movs	r0, #120	; 0x78
 8000d1e:	f7ff ff25 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8000d22:	22db      	movs	r2, #219	; 0xdb
 8000d24:	2100      	movs	r1, #0
 8000d26:	2078      	movs	r0, #120	; 0x78
 8000d28:	f7ff ff20 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000d2c:	2220      	movs	r2, #32
 8000d2e:	2100      	movs	r1, #0
 8000d30:	2078      	movs	r0, #120	; 0x78
 8000d32:	f7ff ff1b 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d36:	228d      	movs	r2, #141	; 0x8d
 8000d38:	2100      	movs	r1, #0
 8000d3a:	2078      	movs	r0, #120	; 0x78
 8000d3c:	f7ff ff16 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0x14); //
 8000d40:	2214      	movs	r2, #20
 8000d42:	2100      	movs	r1, #0
 8000d44:	2078      	movs	r0, #120	; 0x78
 8000d46:	f7ff ff11 	bl	8000b6c <ssd1306_I2C_Write>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 8000d4a:	22af      	movs	r2, #175	; 0xaf
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	2078      	movs	r0, #120	; 0x78
 8000d50:	f7ff ff0c 	bl	8000b6c <ssd1306_I2C_Write>

	// Clear screen
	ssd1306_Fill(Black);
 8000d54:	2000      	movs	r0, #0
 8000d56:	f000 f811 	bl	8000d7c <ssd1306_Fill>

	// Flush buffer to screen
	ssd1306_UpdateScreen();
 8000d5a:	f000 f831 	bl	8000dc0 <ssd1306_UpdateScreen>

	// Set default values for screen object
	SSD1306.CurrentX = 0;
 8000d5e:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <ssd1306_Init+0x140>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <ssd1306_Init+0x140>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	805a      	strh	r2, [r3, #2]

	SSD1306.Initialized = 1;
 8000d6a:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <ssd1306_Init+0x140>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	715a      	strb	r2, [r3, #5]

	return 1;
 8000d70:	2301      	movs	r3, #1
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	200004bc 	.word	0x200004bc

08000d7c <ssd1306_Fill>:

//
//  Fill the whole screen with the given color
//
void ssd1306_Fill(SSD1306_COLOR color)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	e00d      	b.n	8000da8 <ssd1306_Fill+0x2c>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000d8c:	79fb      	ldrb	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d101      	bne.n	8000d96 <ssd1306_Fill+0x1a>
 8000d92:	2100      	movs	r1, #0
 8000d94:	e000      	b.n	8000d98 <ssd1306_Fill+0x1c>
 8000d96:	21ff      	movs	r1, #255	; 0xff
 8000d98:	4a08      	ldr	r2, [pc, #32]	; (8000dbc <ssd1306_Fill+0x40>)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	460a      	mov	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3301      	adds	r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dae:	d3ed      	bcc.n	8000d8c <ssd1306_Fill+0x10>
	}
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	200000bc 	.word	0x200000bc

08000dc0 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
	uint8_t i;

	for (i = 0; i < 8; i++) {
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	71fb      	strb	r3, [r7, #7]
 8000dca:	e01d      	b.n	8000e08 <ssd1306_UpdateScreen+0x48>
		ssd1306_WriteCommand(0xB0 + i);
 8000dcc:	79fb      	ldrb	r3, [r7, #7]
 8000dce:	3b50      	subs	r3, #80	; 0x50
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	2078      	movs	r0, #120	; 0x78
 8000dd8:	f7ff fec8 	bl	8000b6c <ssd1306_I2C_Write>
		ssd1306_WriteCommand(0x00);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2078      	movs	r0, #120	; 0x78
 8000de2:	f7ff fec3 	bl	8000b6c <ssd1306_I2C_Write>
		ssd1306_WriteCommand(0x10);
 8000de6:	2210      	movs	r2, #16
 8000de8:	2100      	movs	r1, #0
 8000dea:	2078      	movs	r0, #120	; 0x78
 8000dec:	f7ff febe 	bl	8000b6c <ssd1306_I2C_Write>

		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * i], SSD1306_WIDTH);
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	01db      	lsls	r3, r3, #7
 8000df4:	4a08      	ldr	r2, [pc, #32]	; (8000e18 <ssd1306_UpdateScreen+0x58>)
 8000df6:	441a      	add	r2, r3
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	2078      	movs	r0, #120	; 0x78
 8000dfe:	f7ff fed3 	bl	8000ba8 <ssd1306_I2C_WriteMulti>
	for (i = 0; i < 8; i++) {
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	3301      	adds	r3, #1
 8000e06:	71fb      	strb	r3, [r7, #7]
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b07      	cmp	r3, #7
 8000e0c:	d9de      	bls.n	8000dcc <ssd1306_UpdateScreen+0xc>
	}
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	200000bc 	.word	0x200000bc

08000e1c <ssd1306_DrawPixel>:
//	X => X Coordinate
//	Y => Y Coordinate
//	color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
 8000e26:	460b      	mov	r3, r1
 8000e28:	71bb      	strb	r3, [r7, #6]
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	717b      	strb	r3, [r7, #5]
	if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT)
 8000e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	db48      	blt.n	8000ec8 <ssd1306_DrawPixel+0xac>
 8000e36:	79bb      	ldrb	r3, [r7, #6]
 8000e38:	2b3f      	cmp	r3, #63	; 0x3f
 8000e3a:	d845      	bhi.n	8000ec8 <ssd1306_DrawPixel+0xac>
		// Don't write outside the buffer
		return;
	}

	// Check if pixel should be inverted
	if (SSD1306.Inverted)
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <ssd1306_DrawPixel+0xb8>)
 8000e3e:	791b      	ldrb	r3, [r3, #4]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d006      	beq.n	8000e52 <ssd1306_DrawPixel+0x36>
	{
		color = (SSD1306_COLOR)!color;
 8000e44:	797b      	ldrb	r3, [r7, #5]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf0c      	ite	eq
 8000e4a:	2301      	moveq	r3, #1
 8000e4c:	2300      	movne	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	717b      	strb	r3, [r7, #5]
	}

	// Draw in the right color
	if (color == White)
 8000e52:	797b      	ldrb	r3, [r7, #5]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d11a      	bne.n	8000e8e <ssd1306_DrawPixel+0x72>
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	08db      	lsrs	r3, r3, #3
 8000e5e:	b2d8      	uxtb	r0, r3
 8000e60:	4603      	mov	r3, r0
 8000e62:	01db      	lsls	r3, r3, #7
 8000e64:	4413      	add	r3, r2
 8000e66:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <ssd1306_DrawPixel+0xbc>)
 8000e68:	5cd3      	ldrb	r3, [r2, r3]
 8000e6a:	b25a      	sxtb	r2, r3
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	b259      	sxtb	r1, r3
 8000e7e:	79fa      	ldrb	r2, [r7, #7]
 8000e80:	4603      	mov	r3, r0
 8000e82:	01db      	lsls	r3, r3, #7
 8000e84:	4413      	add	r3, r2
 8000e86:	b2c9      	uxtb	r1, r1
 8000e88:	4a13      	ldr	r2, [pc, #76]	; (8000ed8 <ssd1306_DrawPixel+0xbc>)
 8000e8a:	54d1      	strb	r1, [r2, r3]
 8000e8c:	e01d      	b.n	8000eca <ssd1306_DrawPixel+0xae>
	}
	else
	{
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e8e:	79fa      	ldrb	r2, [r7, #7]
 8000e90:	79bb      	ldrb	r3, [r7, #6]
 8000e92:	08db      	lsrs	r3, r3, #3
 8000e94:	b2d8      	uxtb	r0, r3
 8000e96:	4603      	mov	r3, r0
 8000e98:	01db      	lsls	r3, r3, #7
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <ssd1306_DrawPixel+0xbc>)
 8000e9e:	5cd3      	ldrb	r3, [r2, r3]
 8000ea0:	b25a      	sxtb	r2, r3
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	b25b      	sxtb	r3, r3
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	b259      	sxtb	r1, r3
 8000eb8:	79fa      	ldrb	r2, [r7, #7]
 8000eba:	4603      	mov	r3, r0
 8000ebc:	01db      	lsls	r3, r3, #7
 8000ebe:	4413      	add	r3, r2
 8000ec0:	b2c9      	uxtb	r1, r1
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <ssd1306_DrawPixel+0xbc>)
 8000ec4:	54d1      	strb	r1, [r2, r3]
 8000ec6:	e000      	b.n	8000eca <ssd1306_DrawPixel+0xae>
		return;
 8000ec8:	bf00      	nop
	}
}
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	200004bc 	.word	0x200004bc
 8000ed8:	200000bc 	.word	0x200000bc

08000edc <ssd1306_WriteChar>:
//	ch 		=> char om weg te schrijven
//	Font 	=> Font waarmee we gaan schrijven
//	color 	=> Black or White
//
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b089      	sub	sp, #36	; 0x24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4604      	mov	r4, r0
 8000ee4:	1d38      	adds	r0, r7, #4
 8000ee6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000eea:	461a      	mov	r2, r3
 8000eec:	4623      	mov	r3, r4
 8000eee:	73fb      	strb	r3, [r7, #15]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	73bb      	strb	r3, [r7, #14]
	uint32_t i, b, j;

	// Check remaining space on current line
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000ef4:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <ssd1306_WriteChar+0xfc>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	793b      	ldrb	r3, [r7, #4]
 8000efc:	4413      	add	r3, r2
 8000efe:	2b7f      	cmp	r3, #127	; 0x7f
 8000f00:	dc06      	bgt.n	8000f10 <ssd1306_WriteChar+0x34>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font.FontHeight))
 8000f02:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <ssd1306_WriteChar+0xfc>)
 8000f04:	885b      	ldrh	r3, [r3, #2]
 8000f06:	461a      	mov	r2, r3
 8000f08:	797b      	ldrb	r3, [r7, #5]
 8000f0a:	4413      	add	r3, r2
	if (SSD1306_WIDTH <= (SSD1306.CurrentX + Font.FontWidth) ||
 8000f0c:	2b3f      	cmp	r3, #63	; 0x3f
 8000f0e:	dd01      	ble.n	8000f14 <ssd1306_WriteChar+0x38>
	{
		// Not enough space on current line
		return 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	e05d      	b.n	8000fd0 <ssd1306_WriteChar+0xf4>
	}

	// Use the font to write
	for (i = 0; i < Font.FontHeight; i++)
 8000f14:	2300      	movs	r3, #0
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	e04c      	b.n	8000fb4 <ssd1306_WriteChar+0xd8>
	{
		b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	3b20      	subs	r3, #32
 8000f20:	7979      	ldrb	r1, [r7, #5]
 8000f22:	fb01 f303 	mul.w	r3, r1, r3
 8000f26:	4619      	mov	r1, r3
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	440b      	add	r3, r1
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	4413      	add	r3, r2
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font.FontWidth; j++)
 8000f34:	2300      	movs	r3, #0
 8000f36:	61bb      	str	r3, [r7, #24]
 8000f38:	e034      	b.n	8000fa4 <ssd1306_WriteChar+0xc8>
		{
			if ((b << j) & 0x8000)
 8000f3a:	697a      	ldr	r2, [r7, #20]
 8000f3c:	69bb      	ldr	r3, [r7, #24]
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d012      	beq.n	8000f70 <ssd1306_WriteChar+0x94>
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000f4a:	4b23      	ldr	r3, [pc, #140]	; (8000fd8 <ssd1306_WriteChar+0xfc>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	b2da      	uxtb	r2, r3
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	4413      	add	r3, r2
 8000f56:	b2d8      	uxtb	r0, r3
 8000f58:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <ssd1306_WriteChar+0xfc>)
 8000f5a:	885b      	ldrh	r3, [r3, #2]
 8000f5c:	b2da      	uxtb	r2, r3
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4413      	add	r3, r2
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	7bba      	ldrb	r2, [r7, #14]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	f7ff ff57 	bl	8000e1c <ssd1306_DrawPixel>
 8000f6e:	e016      	b.n	8000f9e <ssd1306_WriteChar+0xc2>
			}
			else
			{
				ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <ssd1306_WriteChar+0xfc>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	4413      	add	r3, r2
 8000f7c:	b2d8      	uxtb	r0, r3
 8000f7e:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <ssd1306_WriteChar+0xfc>)
 8000f80:	885b      	ldrh	r3, [r3, #2]
 8000f82:	b2da      	uxtb	r2, r3
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	4413      	add	r3, r2
 8000f8a:	b2d9      	uxtb	r1, r3
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	bf0c      	ite	eq
 8000f92:	2301      	moveq	r3, #1
 8000f94:	2300      	movne	r3, #0
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f7ff ff3f 	bl	8000e1c <ssd1306_DrawPixel>
		for (j = 0; j < Font.FontWidth; j++)
 8000f9e:	69bb      	ldr	r3, [r7, #24]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
 8000fa4:	793b      	ldrb	r3, [r7, #4]
 8000fa6:	461a      	mov	r2, r3
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d3c5      	bcc.n	8000f3a <ssd1306_WriteChar+0x5e>
	for (i = 0; i < Font.FontHeight; i++)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	797b      	ldrb	r3, [r7, #5]
 8000fb6:	461a      	mov	r2, r3
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d3ad      	bcc.n	8000f1a <ssd1306_WriteChar+0x3e>
			}
		}
	}

	// The current space is now taken
	SSD1306.CurrentX += Font.FontWidth;
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <ssd1306_WriteChar+0xfc>)
 8000fc0:	881a      	ldrh	r2, [r3, #0]
 8000fc2:	793b      	ldrb	r3, [r7, #4]
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	4413      	add	r3, r2
 8000fc8:	b29a      	uxth	r2, r3
 8000fca:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <ssd1306_WriteChar+0xfc>)
 8000fcc:	801a      	strh	r2, [r3, #0]

	// Return written char for validation
	return ch;
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3724      	adds	r7, #36	; 0x24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	200004bc 	.word	0x200004bc

08000fdc <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	1d38      	adds	r0, r7, #4
 8000fe6:	e880 0006 	stmia.w	r0, {r1, r2}
 8000fea:	70fb      	strb	r3, [r7, #3]
	// Write until null-byte
	while (*str)
 8000fec:	e012      	b.n	8001014 <ssd1306_WriteString+0x38>
	{
		if (ssd1306_WriteChar(*str, Font, color) != *str)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	7818      	ldrb	r0, [r3, #0]
 8000ff2:	78fb      	ldrb	r3, [r7, #3]
 8000ff4:	1d3a      	adds	r2, r7, #4
 8000ff6:	ca06      	ldmia	r2, {r1, r2}
 8000ff8:	f7ff ff70 	bl	8000edc <ssd1306_WriteChar>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	429a      	cmp	r2, r3
 8001006:	d002      	beq.n	800100e <ssd1306_WriteString+0x32>
		{
			// Char could not be written
			return *str;
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	e008      	b.n	8001020 <ssd1306_WriteString+0x44>
		}

		// Next char
		str++;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
	while (*str)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1e8      	bne.n	8000fee <ssd1306_WriteString+0x12>
	}

	// Everything ok
	return *str;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	781b      	ldrb	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <ssd1306_SetCursor>:

//
//	Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	460a      	mov	r2, r1
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	4613      	mov	r3, r2
 8001036:	71bb      	strb	r3, [r7, #6]
	SSD1306.CurrentX = x;
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	b29a      	uxth	r2, r3
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <ssd1306_SetCursor+0x2c>)
 800103e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = y;
 8001040:	79bb      	ldrb	r3, [r7, #6]
 8001042:	b29a      	uxth	r2, r3
 8001044:	4b03      	ldr	r3, [pc, #12]	; (8001054 <ssd1306_SetCursor+0x2c>)
 8001046:	805a      	strh	r2, [r3, #2]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	200004bc 	.word	0x200004bc

08001058 <SSD1306_ClearScreen>:
        }
    }
}

//     Clears the screen
void SSD1306_ClearScreen(){
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
	for(int i=0;i<128;i++)
 800105e:	2300      	movs	r3, #0
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	e013      	b.n	800108c <SSD1306_ClearScreen+0x34>
	{
		for(int j=0; j<64; j++)
 8001064:	2300      	movs	r3, #0
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	e00a      	b.n	8001080 <SSD1306_ClearScreen+0x28>
		{
			ssd1306_DrawPixel(i,j,0);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	b2d1      	uxtb	r1, r2
 8001072:	2200      	movs	r2, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fed1 	bl	8000e1c <ssd1306_DrawPixel>
		for(int j=0; j<64; j++)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3301      	adds	r3, #1
 800107e:	603b      	str	r3, [r7, #0]
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	2b3f      	cmp	r3, #63	; 0x3f
 8001084:	ddf1      	ble.n	800106a <SSD1306_ClearScreen+0x12>
	for(int i=0;i<128;i++)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	3301      	adds	r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b7f      	cmp	r3, #127	; 0x7f
 8001090:	dde8      	ble.n	8001064 <SSD1306_ClearScreen+0xc>
		}
	}
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <GPIO_PeriClockControl>:
#include "stm32f4_gpio.h"


void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	460b      	mov	r3, r1
 80010a6:	70fb      	strb	r3, [r7, #3]
    if(EnorDi == ENABLE)
 80010a8:	78fb      	ldrb	r3, [r7, #3]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d141      	bne.n	8001132 <GPIO_PeriClockControl+0x96>
    {
        if(pGPIOx == GPIOA)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a43      	ldr	r2, [pc, #268]	; (80011c0 <GPIO_PeriClockControl+0x124>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d106      	bne.n	80010c4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80010b6:	4b43      	ldr	r3, [pc, #268]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a42      	ldr	r2, [pc, #264]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
		}else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
        }
    }
}
 80010c2:	e077      	b.n	80011b4 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a40      	ldr	r2, [pc, #256]	; (80011c8 <GPIO_PeriClockControl+0x12c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d106      	bne.n	80010da <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80010cc:	4b3d      	ldr	r3, [pc, #244]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 80010ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d0:	4a3c      	ldr	r2, [pc, #240]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 80010d2:	f043 0302 	orr.w	r3, r3, #2
 80010d6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010d8:	e06c      	b.n	80011b4 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a3b      	ldr	r2, [pc, #236]	; (80011cc <GPIO_PeriClockControl+0x130>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d106      	bne.n	80010f0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80010e2:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e6:	4a37      	ldr	r2, [pc, #220]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 80010e8:	f043 0304 	orr.w	r3, r3, #4
 80010ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80010ee:	e061      	b.n	80011b4 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a37      	ldr	r2, [pc, #220]	; (80011d0 <GPIO_PeriClockControl+0x134>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d106      	bne.n	8001106 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80010f8:	4b32      	ldr	r3, [pc, #200]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 80010fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fc:	4a31      	ldr	r2, [pc, #196]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 80010fe:	f043 0308 	orr.w	r3, r3, #8
 8001102:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001104:	e056      	b.n	80011b4 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a32      	ldr	r2, [pc, #200]	; (80011d4 <GPIO_PeriClockControl+0x138>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d106      	bne.n	800111c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800110e:	4b2d      	ldr	r3, [pc, #180]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a2c      	ldr	r2, [pc, #176]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 8001114:	f043 0310 	orr.w	r3, r3, #16
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
}
 800111a:	e04b      	b.n	80011b4 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a2e      	ldr	r2, [pc, #184]	; (80011d8 <GPIO_PeriClockControl+0x13c>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d147      	bne.n	80011b4 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 8001124:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 8001126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001128:	4a26      	ldr	r2, [pc, #152]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 800112a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800112e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001130:	e040      	b.n	80011b4 <GPIO_PeriClockControl+0x118>
        if(pGPIOx == GPIOA)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a22      	ldr	r2, [pc, #136]	; (80011c0 <GPIO_PeriClockControl+0x124>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d106      	bne.n	8001148 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800113a:	4b22      	ldr	r3, [pc, #136]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a21      	ldr	r2, [pc, #132]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001146:	e035      	b.n	80011b4 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOB)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a1f      	ldr	r2, [pc, #124]	; (80011c8 <GPIO_PeriClockControl+0x12c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d106      	bne.n	800115e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8001150:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a1b      	ldr	r2, [pc, #108]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 8001156:	f023 0302 	bic.w	r3, r3, #2
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800115c:	e02a      	b.n	80011b4 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOC)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a1a      	ldr	r2, [pc, #104]	; (80011cc <GPIO_PeriClockControl+0x130>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d106      	bne.n	8001174 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 800116c:	f023 0304 	bic.w	r3, r3, #4
 8001170:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001172:	e01f      	b.n	80011b4 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOD)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a16      	ldr	r2, [pc, #88]	; (80011d0 <GPIO_PeriClockControl+0x134>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d106      	bne.n	800118a <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 800117c:	4b11      	ldr	r3, [pc, #68]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 8001182:	f023 0308 	bic.w	r3, r3, #8
 8001186:	6313      	str	r3, [r2, #48]	; 0x30
}
 8001188:	e014      	b.n	80011b4 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <GPIO_PeriClockControl+0x138>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d106      	bne.n	80011a0 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 8001198:	f023 0310 	bic.w	r3, r3, #16
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800119e:	e009      	b.n	80011b4 <GPIO_PeriClockControl+0x118>
		}else if (pGPIOx == GPIOH)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a0d      	ldr	r2, [pc, #52]	; (80011d8 <GPIO_PeriClockControl+0x13c>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d105      	bne.n	80011b4 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ac:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <GPIO_PeriClockControl+0x128>)
 80011ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80011b2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020400 	.word	0x40020400
 80011cc:	40020800 	.word	0x40020800
 80011d0:	40020c00 	.word	0x40020c00
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40021c00 	.word	0x40021c00

080011dc <GPIO_Init>:
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    // enable the peripheral clock
    GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2101      	movs	r1, #1
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff56 	bl	800109c <GPIO_PeriClockControl>
    uint32_t temp=0;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
    //1. configure the mode of gpio pin
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	795b      	ldrb	r3, [r3, #5]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d820      	bhi.n	800123e <GPIO_Init+0x62>
    {
        temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	795b      	ldrb	r3, [r3, #5]
 8001200:	461a      	mov	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	791b      	ldrb	r3, [r3, #4]
 8001206:	005b      	lsls	r3, r3, #1
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));              //clearing
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	791b      	ldrb	r3, [r3, #4]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2103      	movs	r1, #3
 800121c:	fa01 f303 	lsl.w	r3, r1, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	4619      	mov	r1, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	400a      	ands	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	6819      	ldr	r1, [r3, #0]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	430a      	orrs	r2, r1
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	e0a1      	b.n	8001382 <GPIO_Init+0x1a6>
    }
    else //interrupt mode
    {
        //1.1. configure the FTSR or RTSR
        if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	795b      	ldrb	r3, [r3, #5]
 8001242:	2b04      	cmp	r3, #4
 8001244:	d117      	bne.n	8001276 <GPIO_Init+0x9a>
        {
            //Falling trigger enabled (for Event and Interrupt) for input line
            EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); 
 8001246:	4b9b      	ldr	r3, [pc, #620]	; (80014b4 <GPIO_Init+0x2d8>)
 8001248:	68db      	ldr	r3, [r3, #12]
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	7912      	ldrb	r2, [r2, #4]
 800124e:	4611      	mov	r1, r2
 8001250:	2201      	movs	r2, #1
 8001252:	408a      	lsls	r2, r1
 8001254:	4611      	mov	r1, r2
 8001256:	4a97      	ldr	r2, [pc, #604]	; (80014b4 <GPIO_Init+0x2d8>)
 8001258:	430b      	orrs	r3, r1
 800125a:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800125c:	4b95      	ldr	r3, [pc, #596]	; (80014b4 <GPIO_Init+0x2d8>)
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	7912      	ldrb	r2, [r2, #4]
 8001264:	4611      	mov	r1, r2
 8001266:	2201      	movs	r2, #1
 8001268:	408a      	lsls	r2, r1
 800126a:	43d2      	mvns	r2, r2
 800126c:	4611      	mov	r1, r2
 800126e:	4a91      	ldr	r2, [pc, #580]	; (80014b4 <GPIO_Init+0x2d8>)
 8001270:	400b      	ands	r3, r1
 8001272:	6093      	str	r3, [r2, #8]
 8001274:	e035      	b.n	80012e2 <GPIO_Init+0x106>
        }
        else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	795b      	ldrb	r3, [r3, #5]
 800127a:	2b05      	cmp	r3, #5
 800127c:	d117      	bne.n	80012ae <GPIO_Init+0xd2>
		{
			// configure the RTSR  // rising
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800127e:	4b8d      	ldr	r3, [pc, #564]	; (80014b4 <GPIO_Init+0x2d8>)
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	7912      	ldrb	r2, [r2, #4]
 8001286:	4611      	mov	r1, r2
 8001288:	2201      	movs	r2, #1
 800128a:	408a      	lsls	r2, r1
 800128c:	4611      	mov	r1, r2
 800128e:	4a89      	ldr	r2, [pc, #548]	; (80014b4 <GPIO_Init+0x2d8>)
 8001290:	430b      	orrs	r3, r1
 8001292:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001294:	4b87      	ldr	r3, [pc, #540]	; (80014b4 <GPIO_Init+0x2d8>)
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	687a      	ldr	r2, [r7, #4]
 800129a:	7912      	ldrb	r2, [r2, #4]
 800129c:	4611      	mov	r1, r2
 800129e:	2201      	movs	r2, #1
 80012a0:	408a      	lsls	r2, r1
 80012a2:	43d2      	mvns	r2, r2
 80012a4:	4611      	mov	r1, r2
 80012a6:	4a83      	ldr	r2, [pc, #524]	; (80014b4 <GPIO_Init+0x2d8>)
 80012a8:	400b      	ands	r3, r1
 80012aa:	60d3      	str	r3, [r2, #12]
 80012ac:	e019      	b.n	80012e2 <GPIO_Init+0x106>
		}
        else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )  // both r & f
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	795b      	ldrb	r3, [r3, #5]
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d115      	bne.n	80012e2 <GPIO_Init+0x106>
		{
			// configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80012b6:	4b7f      	ldr	r3, [pc, #508]	; (80014b4 <GPIO_Init+0x2d8>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	687a      	ldr	r2, [r7, #4]
 80012bc:	7912      	ldrb	r2, [r2, #4]
 80012be:	4611      	mov	r1, r2
 80012c0:	2201      	movs	r2, #1
 80012c2:	408a      	lsls	r2, r1
 80012c4:	4611      	mov	r1, r2
 80012c6:	4a7b      	ldr	r2, [pc, #492]	; (80014b4 <GPIO_Init+0x2d8>)
 80012c8:	430b      	orrs	r3, r1
 80012ca:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80012cc:	4b79      	ldr	r3, [pc, #484]	; (80014b4 <GPIO_Init+0x2d8>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	687a      	ldr	r2, [r7, #4]
 80012d2:	7912      	ldrb	r2, [r2, #4]
 80012d4:	4611      	mov	r1, r2
 80012d6:	2201      	movs	r2, #1
 80012d8:	408a      	lsls	r2, r1
 80012da:	4611      	mov	r1, r2
 80012dc:	4a75      	ldr	r2, [pc, #468]	; (80014b4 <GPIO_Init+0x2d8>)
 80012de:	430b      	orrs	r3, r1
 80012e0:	60d3      	str	r3, [r2, #12]
		}

        //1.2. configure the GPIO port selection in SYSCFG_EXTICR
        uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ; // 4 bit to config
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	791b      	ldrb	r3, [r3, #4]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	791b      	ldrb	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a6f      	ldr	r2, [pc, #444]	; (80014b8 <GPIO_Init+0x2dc>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d024      	beq.n	8001348 <GPIO_Init+0x16c>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a6e      	ldr	r2, [pc, #440]	; (80014bc <GPIO_Init+0x2e0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d01d      	beq.n	8001344 <GPIO_Init+0x168>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a6c      	ldr	r2, [pc, #432]	; (80014c0 <GPIO_Init+0x2e4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d016      	beq.n	8001340 <GPIO_Init+0x164>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6b      	ldr	r2, [pc, #428]	; (80014c4 <GPIO_Init+0x2e8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d00f      	beq.n	800133c <GPIO_Init+0x160>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a69      	ldr	r2, [pc, #420]	; (80014c8 <GPIO_Init+0x2ec>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d008      	beq.n	8001338 <GPIO_Init+0x15c>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a68      	ldr	r2, [pc, #416]	; (80014cc <GPIO_Init+0x2f0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d101      	bne.n	8001334 <GPIO_Init+0x158>
 8001330:	2307      	movs	r3, #7
 8001332:	e00a      	b.n	800134a <GPIO_Init+0x16e>
 8001334:	2300      	movs	r3, #0
 8001336:	e008      	b.n	800134a <GPIO_Init+0x16e>
 8001338:	2304      	movs	r3, #4
 800133a:	e006      	b.n	800134a <GPIO_Init+0x16e>
 800133c:	2303      	movs	r3, #3
 800133e:	e004      	b.n	800134a <GPIO_Init+0x16e>
 8001340:	2302      	movs	r3, #2
 8001342:	e002      	b.n	800134a <GPIO_Init+0x16e>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <GPIO_Init+0x16e>
 8001348:	2300      	movs	r3, #0
 800134a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800134c:	4b60      	ldr	r3, [pc, #384]	; (80014d0 <GPIO_Init+0x2f4>)
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	4a5f      	ldr	r2, [pc, #380]	; (80014d0 <GPIO_Init+0x2f4>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8001358:	7c7a      	ldrb	r2, [r7, #17]
 800135a:	7cbb      	ldrb	r3, [r7, #18]
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	fa02 f103 	lsl.w	r1, r2, r3
 8001362:	4a5c      	ldr	r2, [pc, #368]	; (80014d4 <GPIO_Init+0x2f8>)
 8001364:	7cfb      	ldrb	r3, [r7, #19]
 8001366:	3302      	adds	r3, #2
 8001368:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//1.3 . enable the exti interrupt delivery using IMR - Interrupt mask register
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 800136c:	4b51      	ldr	r3, [pc, #324]	; (80014b4 <GPIO_Init+0x2d8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	687a      	ldr	r2, [r7, #4]
 8001372:	7912      	ldrb	r2, [r2, #4]
 8001374:	4611      	mov	r1, r2
 8001376:	2201      	movs	r2, #1
 8001378:	408a      	lsls	r2, r1
 800137a:	4611      	mov	r1, r2
 800137c:	4a4d      	ldr	r2, [pc, #308]	; (80014b4 <GPIO_Init+0x2d8>)
 800137e:	430b      	orrs	r3, r1
 8001380:	6013      	str	r3, [r2, #0]

    }
    
    //2. configure the speed
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	799b      	ldrb	r3, [r3, #6]
 8001386:	461a      	mov	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	791b      	ldrb	r3, [r3, #4]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	791b      	ldrb	r3, [r3, #4]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	2103      	movs	r1, #3
 80013a2:	fa01 f303 	lsl.w	r3, r1, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	4619      	mov	r1, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	400a      	ands	r2, r1
 80013b0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	6899      	ldr	r1, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	430a      	orrs	r2, r1
 80013c0:	609a      	str	r2, [r3, #8]

    //3. configure the pupd settings
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	79db      	ldrb	r3, [r3, #7]
 80013c6:	461a      	mov	r2, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	791b      	ldrb	r3, [r3, #4]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	791b      	ldrb	r3, [r3, #4]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2103      	movs	r1, #3
 80013e2:	fa01 f303 	lsl.w	r3, r1, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	4619      	mov	r1, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	400a      	ands	r2, r1
 80013f0:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68d9      	ldr	r1, [r3, #12]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	697a      	ldr	r2, [r7, #20]
 80013fe:	430a      	orrs	r2, r1
 8001400:	60da      	str	r2, [r3, #12]

    //4. configure the optype
    temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7a1b      	ldrb	r3, [r3, #8]
 8001406:	461a      	mov	r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	791b      	ldrb	r3, [r3, #4]
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	791b      	ldrb	r3, [r3, #4]
 800141c:	4619      	mov	r1, r3
 800141e:	2301      	movs	r3, #1
 8001420:	408b      	lsls	r3, r1
 8001422:	43db      	mvns	r3, r3
 8001424:	4619      	mov	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	400a      	ands	r2, r1
 800142c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6859      	ldr	r1, [r3, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	697a      	ldr	r2, [r7, #20]
 800143a:	430a      	orrs	r2, r1
 800143c:	605a      	str	r2, [r3, #4]

    //5. configure the alt functionality
    if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	795b      	ldrb	r3, [r3, #5]
 8001442:	2b02      	cmp	r3, #2
 8001444:	d131      	bne.n	80014aa <GPIO_Init+0x2ce>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  / 8;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	791b      	ldrb	r3, [r3, #4]
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	791b      	ldrb	r3, [r3, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing   0b1111
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	7c3a      	ldrb	r2, [r7, #16]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	4618      	mov	r0, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	7c3a      	ldrb	r2, [r7, #16]
 8001478:	4001      	ands	r1, r0
 800147a:	3208      	adds	r2, #8
 800147c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	7c3a      	ldrb	r2, [r7, #16]
 8001486:	3208      	adds	r2, #8
 8001488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7a5b      	ldrb	r3, [r3, #9]
 8001490:	461a      	mov	r2, r3
 8001492:	7bfb      	ldrb	r3, [r7, #15]
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	4618      	mov	r0, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	7c3a      	ldrb	r2, [r7, #16]
 80014a2:	4301      	orrs	r1, r0
 80014a4:	3208      	adds	r2, #8
 80014a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

	}  
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40013c00 	.word	0x40013c00
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020400 	.word	0x40020400
 80014c0:	40020800 	.word	0x40020800
 80014c4:	40020c00 	.word	0x40020c00
 80014c8:	40021000 	.word	0x40021000
 80014cc:	40021c00 	.word	0x40021c00
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40013800 	.word	0x40013800

080014d8 <GPIO_ReadFromInputPin>:
		GPIOH_REG_RESET();
	}
}

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	460b      	mov	r3, r1
 80014e2:	70fb      	strb	r3, [r7, #3]
    uint8_t value;
    value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ; // 
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691a      	ldr	r2, [r3, #16]
 80014e8:	78fb      	ldrb	r3, [r7, #3]
 80014ea:	fa22 f303 	lsr.w	r3, r2, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	73fb      	strb	r3, [r7, #15]
    return value;
 80014f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3714      	adds	r7, #20
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <I2C_GenerateStartCondition>:

static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle );
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle );

static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_START);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	601a      	str	r2, [r3, #0]
}
 8001518:	bf00      	nop
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
	//SlaveAddr = SlaveAddr << 1;
	SlaveAddr &= ~(1); //SlaveAddr is Slave address + r/nw bit=0
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	f023 0301 	bic.w	r3, r3, #1
 8001536:	70fb      	strb	r3, [r7, #3]
	pI2Cx->DR = SlaveAddr;
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	611a      	str	r2, [r3, #16]
}
 800153e:	bf00      	nop
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr

0800154a <I2C_ClearADDRFlag>:
	pI2Cx->DR = SlaveAddr;
}


static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle )
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b084      	sub	sp, #16
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
	uint32_t dummy_read;
	//check for device mode
	if(pI2CHandle->pI2Cx->SR2 & ( 1 << I2C_SR2_MSL))
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d01f      	beq.n	80015a0 <I2C_ClearADDRFlag+0x56>
	{
		//device is in master mode
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	7f1b      	ldrb	r3, [r3, #28]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d112      	bne.n	800158e <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxSize  == 1)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a1b      	ldr	r3, [r3, #32]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d11f      	bne.n	80015b0 <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ack
				I2C_ManageAcking(pI2CHandle->pI2Cx,DISABLE);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f000 f9ab 	bl	80018d2 <I2C_ManageAcking>

				//clear the ADDR flag ( read SR1 , read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	695b      	ldr	r3, [r3, #20]
 8001582:	60fb      	str	r3, [r7, #12]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;
	}


}
 800158c:	e010      	b.n	80015b0 <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	60fb      	str	r3, [r7, #12]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	60fb      	str	r3, [r7, #12]
}
 800159e:	e007      	b.n	80015b0 <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	695b      	ldr	r3, [r3, #20]
 80015a6:	60fb      	str	r3, [r7, #12]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	60fb      	str	r3, [r7, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <I2C_GenerateStopCondition>:


 void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= ( 1 << I2C_CR1_STOP);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	601a      	str	r2, [r3, #0]
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <I2C_PeripheralControl>:

 }


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80015e4:	78fb      	ldrb	r3, [r7, #3]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d106      	bne.n	80015f8 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f043 0201 	orr.w	r2, r3, #1
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
	}else
	{
		pI2Cx->CR1 &= ~(1 << 0);
	}

}
 80015f6:	e005      	b.n	8001604 <I2C_PeripheralControl+0x2c>
		pI2Cx->CR1 &= ~(1 << 0);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f023 0201 	bic.w	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	601a      	str	r2, [r3, #0]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <I2C_PeriClockControl>:

/*
 	I2C_PeriClockControl
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	460b      	mov	r3, r1
 800161a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800161c:	78fb      	ldrb	r3, [r7, #3]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d11f      	bne.n	8001662 <I2C_PeriClockControl+0x52>
	{
		if(pI2Cx == I2C1)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a12      	ldr	r2, [pc, #72]	; (8001670 <I2C_PeriClockControl+0x60>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d106      	bne.n	8001638 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <I2C_PeriClockControl+0x64>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a11      	ldr	r2, [pc, #68]	; (8001674 <I2C_PeriClockControl+0x64>)
 8001630:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
	else
	{
		//TODO
	}

}
 8001636:	e014      	b.n	8001662 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4a0f      	ldr	r2, [pc, #60]	; (8001678 <I2C_PeriClockControl+0x68>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d106      	bne.n	800164e <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <I2C_PeriClockControl+0x64>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	4a0b      	ldr	r2, [pc, #44]	; (8001674 <I2C_PeriClockControl+0x64>)
 8001646:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800164a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800164c:	e009      	b.n	8001662 <I2C_PeriClockControl+0x52>
		}else if (pI2Cx == I2C3)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a0a      	ldr	r2, [pc, #40]	; (800167c <I2C_PeriClockControl+0x6c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d105      	bne.n	8001662 <I2C_PeriClockControl+0x52>
			I2C3_PCLK_EN();
 8001656:	4b07      	ldr	r3, [pc, #28]	; (8001674 <I2C_PeriClockControl+0x64>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a06      	ldr	r2, [pc, #24]	; (8001674 <I2C_PeriClockControl+0x64>)
 800165c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40005400 	.word	0x40005400
 8001674:	40023800 	.word	0x40023800
 8001678:	40005800 	.word	0x40005800
 800167c:	40005c00 	.word	0x40005c00

08001680 <I2C_Init>:

/*
 	I2C_Init
 */
void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0 ;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]

	//enable the clock for the i2cx peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx,ENABLE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	2101      	movs	r1, #1
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ffbc 	bl	8001610 <I2C_PeriClockControl>

	//ack control bit
	tempreg |= pI2CHandle->I2C_Config.I2C_AckControl << 10;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	7a5b      	ldrb	r3, [r3, #9]
 800169c:	029b      	lsls	r3, r3, #10
 800169e:	461a      	mov	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	68fa      	ldr	r2, [r7, #12]
 80016ac:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() /1000000U ;
 80016b2:	f000 f92b 	bl	800190c <RCC_GetPCLK1Value>
 80016b6:	4602      	mov	r2, r0
 80016b8:	4b47      	ldr	r3, [pc, #284]	; (80017d8 <I2C_Init+0x158>)
 80016ba:	fba3 2302 	umull	r2, r3, r3, r2
 80016be:	0c9b      	lsrs	r3, r3, #18
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	4313      	orrs	r3, r2
 80016c4:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 =  (tempreg & 0x3F);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80016d0:	605a      	str	r2, [r3, #4]

   //program the device own address
	tempreg = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	7a1b      	ldrb	r3, [r3, #8]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	461a      	mov	r2, r3
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	60fb      	str	r3, [r7, #12]
	tempreg |= ( 1 << 14);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016ea:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->OAR1 = tempreg;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	609a      	str	r2, [r3, #8]

	//CCR calculations
	uint16_t ccr_value = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	817b      	strh	r3, [r7, #10]
	tempreg = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4a36      	ldr	r2, [pc, #216]	; (80017dc <I2C_Init+0x15c>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d80f      	bhi.n	8001726 <I2C_Init+0xa6>
	{
		//mode is standard mode
		ccr_value = (RCC_GetPCLK1Value() / ( 2 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8001706:	f000 f901 	bl	800190c <RCC_GetPCLK1Value>
 800170a:	4602      	mov	r2, r0
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	fbb2 f3f3 	udiv	r3, r2, r3
 8001716:	817b      	strh	r3, [r7, #10]
		tempreg |= (ccr_value & 0xFFF);
 8001718:	897b      	ldrh	r3, [r7, #10]
 800171a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4313      	orrs	r3, r2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	e02d      	b.n	8001782 <I2C_Init+0x102>
	}else
	{
		//mode is fast mode
		tempreg |= ( 1 << 15);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800172c:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	7a9b      	ldrb	r3, [r3, #10]
 8001732:	039b      	lsls	r3, r3, #14
 8001734:	461a      	mov	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	4313      	orrs	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7a9b      	ldrb	r3, [r3, #10]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d10b      	bne.n	800175c <I2C_Init+0xdc>
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 3 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 8001744:	f000 f8e2 	bl	800190c <RCC_GetPCLK1Value>
 8001748:	4601      	mov	r1, r0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685a      	ldr	r2, [r3, #4]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	fbb1 f3f3 	udiv	r3, r1, r3
 8001758:	817b      	strh	r3, [r7, #10]
 800175a:	e00c      	b.n	8001776 <I2C_Init+0xf6>
		}else
		{
			ccr_value = (RCC_GetPCLK1Value() / ( 25 * pI2CHandle->I2C_Config.I2C_SCLSpeed ) );
 800175c:	f000 f8d6 	bl	800190c <RCC_GetPCLK1Value>
 8001760:	4601      	mov	r1, r0
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685a      	ldr	r2, [r3, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	009a      	lsls	r2, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	fbb1 f3f3 	udiv	r3, r1, r3
 8001774:	817b      	strh	r3, [r7, #10]
		}
		tempreg |= (ccr_value & 0xFFF);
 8001776:	897b      	ldrh	r3, [r7, #10]
 8001778:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
	}
	pI2CHandle->pI2Cx->CCR = tempreg;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	68fa      	ldr	r2, [r7, #12]
 8001788:	61da      	str	r2, [r3, #28]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	4a13      	ldr	r2, [pc, #76]	; (80017dc <I2C_Init+0x15c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d809      	bhi.n	80017a8 <I2C_Init+0x128>
	{
		//mode is standard mode

		tempreg = (RCC_GetPCLK1Value() /1000000U) + 1 ;
 8001794:	f000 f8ba 	bl	800190c <RCC_GetPCLK1Value>
 8001798:	4602      	mov	r2, r0
 800179a:	4b0f      	ldr	r3, [pc, #60]	; (80017d8 <I2C_Init+0x158>)
 800179c:	fba3 2302 	umull	r2, r3, r3, r2
 80017a0:	0c9b      	lsrs	r3, r3, #18
 80017a2:	3301      	adds	r3, #1
 80017a4:	60fb      	str	r3, [r7, #12]
 80017a6:	e00d      	b.n	80017c4 <I2C_Init+0x144>

	}else
	{
		//mode is fast mode
		tempreg = ( (RCC_GetPCLK1Value() * 300) / 1000000000U ) + 1;
 80017a8:	f000 f8b0 	bl	800190c <RCC_GetPCLK1Value>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80017b2:	fb03 f302 	mul.w	r3, r3, r2
 80017b6:	0a5b      	lsrs	r3, r3, #9
 80017b8:	4a09      	ldr	r2, [pc, #36]	; (80017e0 <I2C_Init+0x160>)
 80017ba:	fba2 2303 	umull	r2, r3, r2, r3
 80017be:	09db      	lsrs	r3, r3, #7
 80017c0:	3301      	adds	r3, #1
 80017c2:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->TRISE = (tempreg & 0x3F);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80017ce:	621a      	str	r2, [r3, #32]

}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	431bde83 	.word	0x431bde83
 80017dc:	000186a0 	.word	0x000186a0
 80017e0:	00044b83 	.word	0x00044b83

080017e4 <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx , uint32_t FlagName)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695a      	ldr	r2, [r3, #20]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e000      	b.n	8001800 <I2C_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <I2C_MasterSendData>:



void I2C_MasterSendData(I2C_Handle_t *pI2CHandle,uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr,uint8_t Sr)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
 8001818:	70fb      	strb	r3, [r7, #3]
	// 1. Generate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fe70 	bl	8001504 <I2C_GenerateStartCondition>

	//2. confirm that start generation is completed by checking the SB flag in the SR1
	//   Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_SB)   );
 8001824:	bf00      	nop
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2101      	movs	r1, #1
 800182c:	4618      	mov	r0, r3
 800182e:	f7ff ffd9 	bl	80017e4 <I2C_GetFlagStatus>
 8001832:	4603      	mov	r3, r0
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0f6      	beq.n	8001826 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits )
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	4611      	mov	r1, r2
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fe6f 	bl	8001524 <I2C_ExecuteAddressPhaseWrite>

	//4. Confirm that address phase is completed by checking the ADDR flag in teh SR1
	while( !  I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_ADDR)   );
 8001846:	bf00      	nop
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2102      	movs	r1, #2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff ffc8 	bl	80017e4 <I2C_GetFlagStatus>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f6      	beq.n	8001848 <I2C_MasterSendData+0x3c>

	//5. clear the ADDR flag according to its software sequence
	//   Note: Until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle);
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7ff fe75 	bl	800154a <I2C_ClearADDRFlag>

	//6. send the data until len becomes 0

	while(Len > 0)
 8001860:	e014      	b.n	800188c <I2C_MasterSendData+0x80>
	{
		while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) ); //Wait till TXE is set
 8001862:	bf00      	nop
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ffba 	bl	80017e4 <I2C_GetFlagStatus>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f6      	beq.n	8001864 <I2C_MasterSendData+0x58>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	3301      	adds	r3, #1
 8001884:	60bb      	str	r3, [r7, #8]
		Len--;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	3b01      	subs	r3, #1
 800188a:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1e7      	bne.n	8001862 <I2C_MasterSendData+0x56>

	//7. when Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	//   Note: TXE=1 , BTF=1 , means that both SR and DR are empty and next transmission should begin
	//   when BTF=1 SCL will be stretched (pulled to LOW)

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_TXE) );
 8001892:	bf00      	nop
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2180      	movs	r1, #128	; 0x80
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ffa2 	bl	80017e4 <I2C_GetFlagStatus>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0f6      	beq.n	8001894 <I2C_MasterSendData+0x88>

	while(! I2C_GetFlagStatus(pI2CHandle->pI2Cx,I2C_FLAG_BTF) );
 80018a6:	bf00      	nop
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2104      	movs	r1, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff98 	bl	80017e4 <I2C_GetFlagStatus>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0f6      	beq.n	80018a8 <I2C_MasterSendData+0x9c>


	//8. Generate STOP condition and master need not to wait for the completion of stop condition.
	//   Note: generating STOP, automatically clears the BTF
	if(Sr == I2C_DISABLE_SR )
 80018ba:	7e3b      	ldrb	r3, [r7, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d104      	bne.n	80018ca <I2C_MasterSendData+0xbe>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fe77 	bl	80015b8 <I2C_GenerateStopCondition>

}
 80018ca:	bf00      	nop
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <I2C_ManageAcking>:

}


void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	460b      	mov	r3, r1
 80018dc:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	2b01      	cmp	r3, #1
 80018e2:	d106      	bne.n	80018f2 <I2C_ManageAcking+0x20>
	{
		//enable the ack
		pI2Cx->CR1 |= ( 1 << I2C_CR1_ACK);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	601a      	str	r2, [r3, #0]
	}else
	{
		//disable the ack
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
	}
}
 80018f0:	e005      	b.n	80018fe <I2C_ManageAcking+0x2c>
		pI2Cx->CR1 &= ~( 1 << I2C_CR1_ACK);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	601a      	str	r2, [r3, #0]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
	...

0800190c <RCC_GetPCLK1Value>:

/*
    RCC_GetPCLK1Value
*/
uint32_t RCC_GetPCLK1Value(void)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8001912:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <RCC_GetPCLK1Value+0x94>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	089b      	lsrs	r3, r3, #2
 8001918:	b2db      	uxtb	r3, r3
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	727b      	strb	r3, [r7, #9]

    if(clksrc == 0 )
 8001920:	7a7b      	ldrb	r3, [r7, #9]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <RCC_GetPCLK1Value+0x98>)
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	e004      	b.n	8001936 <RCC_GetPCLK1Value+0x2a>
	}else if(clksrc == 1)
 800192c:	7a7b      	ldrb	r3, [r7, #9]
 800192e:	2b01      	cmp	r3, #1
 8001930:	d101      	bne.n	8001936 <RCC_GetPCLK1Value+0x2a>
	{
		SystemClk = 8000000;
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <RCC_GetPCLK1Value+0x9c>)
 8001934:	60fb      	str	r3, [r7, #12]
	}

    //for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <RCC_GetPCLK1Value+0x94>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8001944:	7a3b      	ldrb	r3, [r7, #8]
 8001946:	2b07      	cmp	r3, #7
 8001948:	d802      	bhi.n	8001950 <RCC_GetPCLK1Value+0x44>
	{
		ahbp = 1;
 800194a:	2301      	movs	r3, #1
 800194c:	72fb      	strb	r3, [r7, #11]
 800194e:	e005      	b.n	800195c <RCC_GetPCLK1Value+0x50>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8001950:	7a3b      	ldrb	r3, [r7, #8]
 8001952:	3b08      	subs	r3, #8
 8001954:	4a15      	ldr	r2, [pc, #84]	; (80019ac <RCC_GetPCLK1Value+0xa0>)
 8001956:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800195a:	72fb      	strb	r3, [r7, #11]
	}

    //apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <RCC_GetPCLK1Value+0x94>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	0a9b      	lsrs	r3, r3, #10
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	723b      	strb	r3, [r7, #8]

    if(temp < 4)
 800196a:	7a3b      	ldrb	r3, [r7, #8]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d802      	bhi.n	8001976 <RCC_GetPCLK1Value+0x6a>
	{
		apb1p = 1;
 8001970:	2301      	movs	r3, #1
 8001972:	72bb      	strb	r3, [r7, #10]
 8001974:	e004      	b.n	8001980 <RCC_GetPCLK1Value+0x74>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8001976:	7a3b      	ldrb	r3, [r7, #8]
 8001978:	3b04      	subs	r3, #4
 800197a:	4a0d      	ldr	r2, [pc, #52]	; (80019b0 <RCC_GetPCLK1Value+0xa4>)
 800197c:	5cd3      	ldrb	r3, [r2, r3]
 800197e:	72bb      	strb	r3, [r7, #10]
	}

    pclk1 =  (SystemClk / ahbp) /apb1p;
 8001980:	7afb      	ldrb	r3, [r7, #11]
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	fbb2 f2f3 	udiv	r2, r2, r3
 8001988:	7abb      	ldrb	r3, [r7, #10]
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	607b      	str	r3, [r7, #4]

	return pclk1;
 8001990:	687b      	ldr	r3, [r7, #4]
}
 8001992:	4618      	mov	r0, r3
 8001994:	3714      	adds	r7, #20
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800
 80019a4:	00f42400 	.word	0x00f42400
 80019a8:	007a1200 	.word	0x007a1200
 80019ac:	20000014 	.word	0x20000014
 80019b0:	20000024 	.word	0x20000024

080019b4 <systick_init>:
uint32_t * SYST_CTRL = (uint32_t *) (0xE000E010);
uint32_t * SYST_LOAD = (uint32_t *) (0xE000E014);
uint32_t * SYST_VAL  = (uint32_t *) (0xE000E018);

void systick_init(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
	*SYST_CTRL = 0;
 80019b8:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <systick_init+0x30>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
	*SYST_LOAD = 0x00FFFFFF;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <systick_init+0x34>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 80019c8:	601a      	str	r2, [r3, #0]
	*SYST_VAL  = 0;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <systick_init+0x38>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
	*SYST_CTRL = 5;
 80019d2:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <systick_init+0x30>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2205      	movs	r2, #5
 80019d8:	601a      	str	r2, [r3, #0]
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr
 80019e4:	20000028 	.word	0x20000028
 80019e8:	2000002c 	.word	0x2000002c
 80019ec:	20000030 	.word	0x20000030

080019f0 <DelayMillis>:
void DelayMillis(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
	*SYST_LOAD = 8000 - 1;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <DelayMillis+0x30>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80019fc:	601a      	str	r2, [r3, #0]
	*SYST_VAL  = 0;
 80019fe:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <DelayMillis+0x34>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
	while((*SYST_CTRL & 0x00010000)  == 0);
 8001a06:	bf00      	nop
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <DelayMillis+0x38>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f8      	beq.n	8001a08 <DelayMillis+0x18>
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	2000002c 	.word	0x2000002c
 8001a24:	20000030 	.word	0x20000030
 8001a28:	20000028 	.word	0x20000028

08001a2c <DelayMs>:
void DelayMs(unsigned long t)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	for ( ; t>0; t--)
 8001a34:	e004      	b.n	8001a40 <DelayMs+0x14>
	{
		DelayMillis();
 8001a36:	f7ff ffdb 	bl	80019f0 <DelayMillis>
	for ( ; t>0; t--)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	607b      	str	r3, [r7, #4]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f7      	bne.n	8001a36 <DelayMs+0xa>
	}
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
	...

08001a50 <__errno>:
 8001a50:	4b01      	ldr	r3, [pc, #4]	; (8001a58 <__errno+0x8>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	20000034 	.word	0x20000034

08001a5c <__libc_init_array>:
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	4e0d      	ldr	r6, [pc, #52]	; (8001a94 <__libc_init_array+0x38>)
 8001a60:	4c0d      	ldr	r4, [pc, #52]	; (8001a98 <__libc_init_array+0x3c>)
 8001a62:	1ba4      	subs	r4, r4, r6
 8001a64:	10a4      	asrs	r4, r4, #2
 8001a66:	2500      	movs	r5, #0
 8001a68:	42a5      	cmp	r5, r4
 8001a6a:	d109      	bne.n	8001a80 <__libc_init_array+0x24>
 8001a6c:	4e0b      	ldr	r6, [pc, #44]	; (8001a9c <__libc_init_array+0x40>)
 8001a6e:	4c0c      	ldr	r4, [pc, #48]	; (8001aa0 <__libc_init_array+0x44>)
 8001a70:	f000 f8c0 	bl	8001bf4 <_init>
 8001a74:	1ba4      	subs	r4, r4, r6
 8001a76:	10a4      	asrs	r4, r4, #2
 8001a78:	2500      	movs	r5, #0
 8001a7a:	42a5      	cmp	r5, r4
 8001a7c:	d105      	bne.n	8001a8a <__libc_init_array+0x2e>
 8001a7e:	bd70      	pop	{r4, r5, r6, pc}
 8001a80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a84:	4798      	blx	r3
 8001a86:	3501      	adds	r5, #1
 8001a88:	e7ee      	b.n	8001a68 <__libc_init_array+0xc>
 8001a8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a8e:	4798      	blx	r3
 8001a90:	3501      	adds	r5, #1
 8001a92:	e7f2      	b.n	8001a7a <__libc_init_array+0x1e>
 8001a94:	0800297c 	.word	0x0800297c
 8001a98:	0800297c 	.word	0x0800297c
 8001a9c:	0800297c 	.word	0x0800297c
 8001aa0:	08002980 	.word	0x08002980

08001aa4 <rand>:
 8001aa4:	b538      	push	{r3, r4, r5, lr}
 8001aa6:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <rand+0x50>)
 8001aa8:	681c      	ldr	r4, [r3, #0]
 8001aaa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001aac:	b97b      	cbnz	r3, 8001ace <rand+0x2a>
 8001aae:	2018      	movs	r0, #24
 8001ab0:	f000 f82c 	bl	8001b0c <malloc>
 8001ab4:	4a10      	ldr	r2, [pc, #64]	; (8001af8 <rand+0x54>)
 8001ab6:	4b11      	ldr	r3, [pc, #68]	; (8001afc <rand+0x58>)
 8001ab8:	63a0      	str	r0, [r4, #56]	; 0x38
 8001aba:	e9c0 2300 	strd	r2, r3, [r0]
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <rand+0x5c>)
 8001ac0:	6083      	str	r3, [r0, #8]
 8001ac2:	230b      	movs	r3, #11
 8001ac4:	8183      	strh	r3, [r0, #12]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	2300      	movs	r3, #0
 8001aca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001ace:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8001ad0:	480c      	ldr	r0, [pc, #48]	; (8001b04 <rand+0x60>)
 8001ad2:	690a      	ldr	r2, [r1, #16]
 8001ad4:	694b      	ldr	r3, [r1, #20]
 8001ad6:	4c0c      	ldr	r4, [pc, #48]	; (8001b08 <rand+0x64>)
 8001ad8:	4350      	muls	r0, r2
 8001ada:	fb04 0003 	mla	r0, r4, r3, r0
 8001ade:	fba2 2304 	umull	r2, r3, r2, r4
 8001ae2:	4403      	add	r3, r0
 8001ae4:	1c54      	adds	r4, r2, #1
 8001ae6:	f143 0500 	adc.w	r5, r3, #0
 8001aea:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8001aee:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8001af2:	bd38      	pop	{r3, r4, r5, pc}
 8001af4:	20000034 	.word	0x20000034
 8001af8:	abcd330e 	.word	0xabcd330e
 8001afc:	e66d1234 	.word	0xe66d1234
 8001b00:	0005deec 	.word	0x0005deec
 8001b04:	5851f42d 	.word	0x5851f42d
 8001b08:	4c957f2d 	.word	0x4c957f2d

08001b0c <malloc>:
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <malloc+0xc>)
 8001b0e:	4601      	mov	r1, r0
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	f000 b803 	b.w	8001b1c <_malloc_r>
 8001b16:	bf00      	nop
 8001b18:	20000034 	.word	0x20000034

08001b1c <_malloc_r>:
 8001b1c:	b570      	push	{r4, r5, r6, lr}
 8001b1e:	1ccd      	adds	r5, r1, #3
 8001b20:	f025 0503 	bic.w	r5, r5, #3
 8001b24:	3508      	adds	r5, #8
 8001b26:	2d0c      	cmp	r5, #12
 8001b28:	bf38      	it	cc
 8001b2a:	250c      	movcc	r5, #12
 8001b2c:	2d00      	cmp	r5, #0
 8001b2e:	4606      	mov	r6, r0
 8001b30:	db01      	blt.n	8001b36 <_malloc_r+0x1a>
 8001b32:	42a9      	cmp	r1, r5
 8001b34:	d903      	bls.n	8001b3e <_malloc_r+0x22>
 8001b36:	230c      	movs	r3, #12
 8001b38:	6033      	str	r3, [r6, #0]
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	bd70      	pop	{r4, r5, r6, pc}
 8001b3e:	f000 f857 	bl	8001bf0 <__malloc_lock>
 8001b42:	4a21      	ldr	r2, [pc, #132]	; (8001bc8 <_malloc_r+0xac>)
 8001b44:	6814      	ldr	r4, [r2, #0]
 8001b46:	4621      	mov	r1, r4
 8001b48:	b991      	cbnz	r1, 8001b70 <_malloc_r+0x54>
 8001b4a:	4c20      	ldr	r4, [pc, #128]	; (8001bcc <_malloc_r+0xb0>)
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	b91b      	cbnz	r3, 8001b58 <_malloc_r+0x3c>
 8001b50:	4630      	mov	r0, r6
 8001b52:	f000 f83d 	bl	8001bd0 <_sbrk_r>
 8001b56:	6020      	str	r0, [r4, #0]
 8001b58:	4629      	mov	r1, r5
 8001b5a:	4630      	mov	r0, r6
 8001b5c:	f000 f838 	bl	8001bd0 <_sbrk_r>
 8001b60:	1c43      	adds	r3, r0, #1
 8001b62:	d124      	bne.n	8001bae <_malloc_r+0x92>
 8001b64:	230c      	movs	r3, #12
 8001b66:	6033      	str	r3, [r6, #0]
 8001b68:	4630      	mov	r0, r6
 8001b6a:	f000 f842 	bl	8001bf2 <__malloc_unlock>
 8001b6e:	e7e4      	b.n	8001b3a <_malloc_r+0x1e>
 8001b70:	680b      	ldr	r3, [r1, #0]
 8001b72:	1b5b      	subs	r3, r3, r5
 8001b74:	d418      	bmi.n	8001ba8 <_malloc_r+0x8c>
 8001b76:	2b0b      	cmp	r3, #11
 8001b78:	d90f      	bls.n	8001b9a <_malloc_r+0x7e>
 8001b7a:	600b      	str	r3, [r1, #0]
 8001b7c:	50cd      	str	r5, [r1, r3]
 8001b7e:	18cc      	adds	r4, r1, r3
 8001b80:	4630      	mov	r0, r6
 8001b82:	f000 f836 	bl	8001bf2 <__malloc_unlock>
 8001b86:	f104 000b 	add.w	r0, r4, #11
 8001b8a:	1d23      	adds	r3, r4, #4
 8001b8c:	f020 0007 	bic.w	r0, r0, #7
 8001b90:	1ac3      	subs	r3, r0, r3
 8001b92:	d0d3      	beq.n	8001b3c <_malloc_r+0x20>
 8001b94:	425a      	negs	r2, r3
 8001b96:	50e2      	str	r2, [r4, r3]
 8001b98:	e7d0      	b.n	8001b3c <_malloc_r+0x20>
 8001b9a:	428c      	cmp	r4, r1
 8001b9c:	684b      	ldr	r3, [r1, #4]
 8001b9e:	bf16      	itet	ne
 8001ba0:	6063      	strne	r3, [r4, #4]
 8001ba2:	6013      	streq	r3, [r2, #0]
 8001ba4:	460c      	movne	r4, r1
 8001ba6:	e7eb      	b.n	8001b80 <_malloc_r+0x64>
 8001ba8:	460c      	mov	r4, r1
 8001baa:	6849      	ldr	r1, [r1, #4]
 8001bac:	e7cc      	b.n	8001b48 <_malloc_r+0x2c>
 8001bae:	1cc4      	adds	r4, r0, #3
 8001bb0:	f024 0403 	bic.w	r4, r4, #3
 8001bb4:	42a0      	cmp	r0, r4
 8001bb6:	d005      	beq.n	8001bc4 <_malloc_r+0xa8>
 8001bb8:	1a21      	subs	r1, r4, r0
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f000 f808 	bl	8001bd0 <_sbrk_r>
 8001bc0:	3001      	adds	r0, #1
 8001bc2:	d0cf      	beq.n	8001b64 <_malloc_r+0x48>
 8001bc4:	6025      	str	r5, [r4, #0]
 8001bc6:	e7db      	b.n	8001b80 <_malloc_r+0x64>
 8001bc8:	200004c4 	.word	0x200004c4
 8001bcc:	200004c8 	.word	0x200004c8

08001bd0 <_sbrk_r>:
 8001bd0:	b538      	push	{r3, r4, r5, lr}
 8001bd2:	4c06      	ldr	r4, [pc, #24]	; (8001bec <_sbrk_r+0x1c>)
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	4605      	mov	r5, r0
 8001bd8:	4608      	mov	r0, r1
 8001bda:	6023      	str	r3, [r4, #0]
 8001bdc:	f7fe ff66 	bl	8000aac <_sbrk>
 8001be0:	1c43      	adds	r3, r0, #1
 8001be2:	d102      	bne.n	8001bea <_sbrk_r+0x1a>
 8001be4:	6823      	ldr	r3, [r4, #0]
 8001be6:	b103      	cbz	r3, 8001bea <_sbrk_r+0x1a>
 8001be8:	602b      	str	r3, [r5, #0]
 8001bea:	bd38      	pop	{r3, r4, r5, pc}
 8001bec:	200007a8 	.word	0x200007a8

08001bf0 <__malloc_lock>:
 8001bf0:	4770      	bx	lr

08001bf2 <__malloc_unlock>:
 8001bf2:	4770      	bx	lr

08001bf4 <_init>:
 8001bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bf6:	bf00      	nop
 8001bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001bfa:	bc08      	pop	{r3}
 8001bfc:	469e      	mov	lr, r3
 8001bfe:	4770      	bx	lr

08001c00 <_fini>:
 8001c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c02:	bf00      	nop
 8001c04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c06:	bc08      	pop	{r3}
 8001c08:	469e      	mov	lr, r3
 8001c0a:	4770      	bx	lr
